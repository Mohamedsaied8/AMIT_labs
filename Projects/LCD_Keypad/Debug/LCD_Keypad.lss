
LCD_Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000028e2  00002976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000ca  008000ca  000029e0  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  000029e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000def  00000000  00000000  000048e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000056d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000059c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 12 	call	0x2474	; 0x2474 <main>
      8a:	0c 94 6f 14 	jmp	0x28de	; 0x28de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Dio_WritePort>:
#include "dio_hw.h"
#include "dio_types.h"
#include "STD_Types.h"
#include "bit_math.h"

void Dio_WritePort(Dio_PortType portx,uint8 uxvalue){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <Dio_WritePort+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <Dio_WritePort+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02

	switch(portx){
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3c 83       	std	Y+4, r19	; 0x04
     cb6:	2b 83       	std	Y+3, r18	; 0x03
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	d1 f0       	breq	.+52     	; 0xcf6 <Dio_WritePort+0x58>
     cc2:	2b 81       	ldd	r18, Y+3	; 0x03
     cc4:	3c 81       	ldd	r19, Y+4	; 0x04
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <Dio_WritePort+0x38>
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	61 f0       	breq	.+24     	; 0xcec <Dio_WritePort+0x4e>
     cd4:	1e c0       	rjmp	.+60     	; 0xd12 <Dio_WritePort+0x74>
     cd6:	2b 81       	ldd	r18, Y+3	; 0x03
     cd8:	3c 81       	ldd	r19, Y+4	; 0x04
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	81 f0       	breq	.+32     	; 0xd00 <Dio_WritePort+0x62>
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <Dio_WritePort+0x6c>
     cea:	13 c0       	rjmp	.+38     	; 0xd12 <Dio_WritePort+0x74>
		case Dio_Port_A:
		PORTA_REG =uxvalue;
     cec:	eb e3       	ldi	r30, 0x3B	; 59
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	80 83       	st	Z, r24
     cf4:	0e c0       	rjmp	.+28     	; 0xd12 <Dio_WritePort+0x74>
		
		break;
		case Dio_Port_B:
		PORTB_REG =uxvalue;
     cf6:	e8 e3       	ldi	r30, 0x38	; 56
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	80 83       	st	Z, r24
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <Dio_WritePort+0x74>

		break;
		case Dio_Port_C:
			PORTC_REG =uxvalue;
     d00:	e5 e3       	ldi	r30, 0x35	; 53
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	80 83       	st	Z, r24
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <Dio_WritePort+0x74>
		break;
		case Dio_Port_D:
			PORTD_REG =uxvalue;
     d0a:	e2 e3       	ldi	r30, 0x32	; 50
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	80 83       	st	Z, r24

		break;
		
	}
	
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <Dio_WriteChannel>:
/*
*
*/
void Dio_WriteChannel(Dio_ChannelType channel,STD_levelType level){
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <Dio_WriteChannel+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <Dio_WriteChannel+0x8>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <Dio_WriteChannel+0xa>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	6c 83       	std	Y+4, r22	; 0x04
	
		Dio_PortType channel_port=channel/8;
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	86 95       	lsr	r24
     d36:	86 95       	lsr	r24
     d38:	86 95       	lsr	r24
     d3a:	8a 83       	std	Y+2, r24	; 0x02
		Dio_ChannelType ChannelPos =channel%8;
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	87 70       	andi	r24, 0x07	; 7
     d40:	89 83       	std	Y+1, r24	; 0x01
		
		switch(channel_port){
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	3e 83       	std	Y+6, r19	; 0x06
     d4a:	2d 83       	std	Y+5, r18	; 0x05
     d4c:	8d 81       	ldd	r24, Y+5	; 0x05
     d4e:	9e 81       	ldd	r25, Y+6	; 0x06
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <Dio_WriteChannel+0x38>
     d56:	43 c0       	rjmp	.+134    	; 0xdde <Dio_WriteChannel+0xbe>
     d58:	2d 81       	ldd	r18, Y+5	; 0x05
     d5a:	3e 81       	ldd	r19, Y+6	; 0x06
     d5c:	22 30       	cpi	r18, 0x02	; 2
     d5e:	31 05       	cpc	r19, r1
     d60:	2c f4       	brge	.+10     	; 0xd6c <Dio_WriteChannel+0x4c>
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	71 f0       	breq	.+28     	; 0xd86 <Dio_WriteChannel+0x66>
     d6a:	bc c0       	rjmp	.+376    	; 0xee4 <Dio_WriteChannel+0x1c4>
     d6c:	2d 81       	ldd	r18, Y+5	; 0x05
     d6e:	3e 81       	ldd	r19, Y+6	; 0x06
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <Dio_WriteChannel+0x58>
     d76:	5f c0       	rjmp	.+190    	; 0xe36 <Dio_WriteChannel+0x116>
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	9e 81       	ldd	r25, Y+6	; 0x06
     d7c:	83 30       	cpi	r24, 0x03	; 3
     d7e:	91 05       	cpc	r25, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <Dio_WriteChannel+0x64>
     d82:	85 c0       	rjmp	.+266    	; 0xe8e <Dio_WriteChannel+0x16e>
     d84:	af c0       	rjmp	.+350    	; 0xee4 <Dio_WriteChannel+0x1c4>
			case Dio_Port_A:
			if(level == STD_low)
     d86:	8c 81       	ldd	r24, Y+4	; 0x04
     d88:	88 23       	and	r24, r24
     d8a:	a9 f4       	brne	.+42     	; 0xdb6 <Dio_WriteChannel+0x96>
			{
				CLR_BIT(PORTA_REG,ChannelPos );
     d8c:	ab e3       	ldi	r26, 0x3B	; 59
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	eb e3       	ldi	r30, 0x3B	; 59
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <Dio_WriteChannel+0x8a>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <Dio_WriteChannel+0x86>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	97 c0       	rjmp	.+302    	; 0xee4 <Dio_WriteChannel+0x1c4>
			}
			else
			{
				SET_BIT(PORTA_REG,ChannelPos );
     db6:	ab e3       	ldi	r26, 0x3B	; 59
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	eb e3       	ldi	r30, 0x3B	; 59
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	48 2f       	mov	r20, r24
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	02 2e       	mov	r0, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <Dio_WriteChannel+0xb4>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	0a 94       	dec	r0
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <Dio_WriteChannel+0xb0>
     dd8:	84 2b       	or	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	83 c0       	rjmp	.+262    	; 0xee4 <Dio_WriteChannel+0x1c4>
			}
			break;
			case Dio_Port_B:
			if(level == STD_low)
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	88 23       	and	r24, r24
     de2:	a9 f4       	brne	.+42     	; 0xe0e <Dio_WriteChannel+0xee>
			{
				CLR_BIT(PORTB_REG,ChannelPos );
     de4:	a8 e3       	ldi	r26, 0x38	; 56
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e3       	ldi	r30, 0x38	; 56
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <Dio_WriteChannel+0xe2>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <Dio_WriteChannel+0xde>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	6b c0       	rjmp	.+214    	; 0xee4 <Dio_WriteChannel+0x1c4>
			}
			else
			{
				SET_BIT(PORTB_REG,ChannelPos );
     e0e:	a8 e3       	ldi	r26, 0x38	; 56
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e3       	ldi	r30, 0x38	; 56
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <Dio_WriteChannel+0x10c>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <Dio_WriteChannel+0x108>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	57 c0       	rjmp	.+174    	; 0xee4 <Dio_WriteChannel+0x1c4>
			} 
			break;
			case Dio_Port_C: 
			if(level == STD_low)
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	88 23       	and	r24, r24
     e3a:	a9 f4       	brne	.+42     	; 0xe66 <Dio_WriteChannel+0x146>
			{
				CLR_BIT(PORTC_REG,ChannelPos );
     e3c:	a5 e3       	ldi	r26, 0x35	; 53
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e5 e3       	ldi	r30, 0x35	; 53
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <Dio_WriteChannel+0x13a>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <Dio_WriteChannel+0x136>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <Dio_WriteChannel+0x1c4>
			}
			else
			{
				SET_BIT(PORTC_REG,ChannelPos );
     e66:	a5 e3       	ldi	r26, 0x35	; 53
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e5 e3       	ldi	r30, 0x35	; 53
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <Dio_WriteChannel+0x164>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <Dio_WriteChannel+0x160>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	2b c0       	rjmp	.+86     	; 0xee4 <Dio_WriteChannel+0x1c4>
			}
			break;
			case Dio_Port_D: 
			if(level == STD_low)
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	88 23       	and	r24, r24
     e92:	a9 f4       	brne	.+42     	; 0xebe <Dio_WriteChannel+0x19e>
			{
				CLR_BIT(PORTD_REG,ChannelPos );
     e94:	a2 e3       	ldi	r26, 0x32	; 50
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e2 e3       	ldi	r30, 0x32	; 50
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <Dio_WriteChannel+0x192>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <Dio_WriteChannel+0x18e>
     eb6:	80 95       	com	r24
     eb8:	84 23       	and	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	13 c0       	rjmp	.+38     	; 0xee4 <Dio_WriteChannel+0x1c4>
			}
			else
			{
				SET_BIT(PORTD_REG,ChannelPos );
     ebe:	a2 e3       	ldi	r26, 0x32	; 50
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e2 e3       	ldi	r30, 0x32	; 50
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <Dio_WriteChannel+0x1bc>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <Dio_WriteChannel+0x1b8>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
			}
			break;
			
		}
	
}
     ee4:	26 96       	adiw	r28, 0x06	; 6
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	f8 94       	cli
     eea:	de bf       	out	0x3e, r29	; 62
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	cd bf       	out	0x3d, r28	; 61
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <DioReadChannel>:
/*
*Read channel
*/
STD_levelType DioReadChannel(Dio_ChannelType ChannelId){
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <DioReadChannel+0x6>
     efc:	00 d0       	rcall	.+0      	; 0xefe <DioReadChannel+0x8>
     efe:	00 d0       	rcall	.+0      	; 0xf00 <DioReadChannel+0xa>
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	8c 83       	std	Y+4, r24	; 0x04
	Dio_PortType channel_port=ChannelId/8;
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	86 95       	lsr	r24
     f0a:	86 95       	lsr	r24
     f0c:	86 95       	lsr	r24
     f0e:	8b 83       	std	Y+3, r24	; 0x03
	Dio_ChannelType channelPos=ChannelId%8;
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	87 70       	andi	r24, 0x07	; 7
     f14:	8a 83       	std	Y+2, r24	; 0x02
	STD_levelType level;
	switch(channel_port){
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3e 83       	std	Y+6, r19	; 0x06
     f1e:	2d 83       	std	Y+5, r18	; 0x05
     f20:	4d 81       	ldd	r20, Y+5	; 0x05
     f22:	5e 81       	ldd	r21, Y+6	; 0x06
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	41 f1       	breq	.+80     	; 0xf7a <DioReadChannel+0x84>
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <DioReadChannel+0x4a>
     f34:	2d 81       	ldd	r18, Y+5	; 0x05
     f36:	3e 81       	ldd	r19, Y+6	; 0x06
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	61 f0       	breq	.+24     	; 0xf56 <DioReadChannel+0x60>
     f3e:	52 c0       	rjmp	.+164    	; 0xfe4 <DioReadChannel+0xee>
     f40:	4d 81       	ldd	r20, Y+5	; 0x05
     f42:	5e 81       	ldd	r21, Y+6	; 0x06
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	51 f1       	breq	.+84     	; 0xf9e <DioReadChannel+0xa8>
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	b9 f1       	breq	.+110    	; 0xfc2 <DioReadChannel+0xcc>
     f54:	47 c0       	rjmp	.+142    	; 0xfe4 <DioReadChannel+0xee>
		case Dio_Port_A:
				level=GET_BIT(PINA_REG,channelPos);
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DioReadChannel+0x78>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DioReadChannel+0x74>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	35 c0       	rjmp	.+106    	; 0xfe4 <DioReadChannel+0xee>
		break;
		
		case Dio_Port_B:		
				level=GET_BIT(PINB_REG,channelPos);
     f7a:	e6 e3       	ldi	r30, 0x36	; 54
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DioReadChannel+0x9c>
     f8e:	55 95       	asr	r21
     f90:	47 95       	ror	r20
     f92:	8a 95       	dec	r24
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DioReadChannel+0x98>
     f96:	ca 01       	movw	r24, r20
     f98:	81 70       	andi	r24, 0x01	; 1
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	23 c0       	rjmp	.+70     	; 0xfe4 <DioReadChannel+0xee>
		break;
		case Dio_Port_C:
				level=GET_BIT(PINC_REG,channelPos);
     f9e:	e3 e3       	ldi	r30, 0x33	; 51
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	88 2f       	mov	r24, r24
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a9 01       	movw	r20, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DioReadChannel+0xc0>
     fb2:	55 95       	asr	r21
     fb4:	47 95       	ror	r20
     fb6:	8a 95       	dec	r24
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DioReadChannel+0xbc>
     fba:	ca 01       	movw	r24, r20
     fbc:	81 70       	andi	r24, 0x01	; 1
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	11 c0       	rjmp	.+34     	; 0xfe4 <DioReadChannel+0xee>
		break;
		
		case Dio_Port_D:
				level=GET_BIT(PIND_REG,channelPos);
     fc2:	e0 e3       	ldi	r30, 0x30	; 48
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a9 01       	movw	r20, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DioReadChannel+0xe4>
     fd6:	55 95       	asr	r21
     fd8:	47 95       	ror	r20
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DioReadChannel+0xe0>
     fde:	ca 01       	movw	r24, r20
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	89 83       	std	Y+1, r24	; 0x01
		break;
		
	}
	return level;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
		
}	
     fe6:	26 96       	adiw	r28, 0x06	; 6
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	08 95       	ret

00000ff8 <Dio_init>:
/*PD6*/		{Output,STD_low},
/*PD7*/		{Output,STD_low},
};

void Dio_init(void)
{
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	27 97       	sbiw	r28, 0x07	; 7
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
    100c:	1b 82       	std	Y+3, r1	; 0x03
    100e:	f9 c0       	rjmp	.+498    	; 0x1202 <Dio_init+0x20a>
	{
		currentPin = counter % 8;
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	87 70       	andi	r24, 0x07	; 7
    1014:	8a 83       	std	Y+2, r24	; 0x02
		currentPort = counter /8;
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	86 95       	lsr	r24
    101a:	86 95       	lsr	r24
    101c:	86 95       	lsr	r24
    101e:	89 83       	std	Y+1, r24	; 0x01
		if(Dio_pin_config[counter].pinDirection ==Output)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	fc 01       	movw	r30, r24
    102c:	e6 59       	subi	r30, 0x96	; 150
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	80 81       	ld	r24, Z
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	09 f0       	breq	.+2      	; 0x1038 <Dio_init+0x40>
    1036:	6f c0       	rjmp	.+222    	; 0x1116 <Dio_init+0x11e>
		{
			switch (currentPort)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	3f 83       	std	Y+7, r19	; 0x07
    1040:	2e 83       	std	Y+6, r18	; 0x06
    1042:	8e 81       	ldd	r24, Y+6	; 0x06
    1044:	9f 81       	ldd	r25, Y+7	; 0x07
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	91 05       	cpc	r25, r1
    104a:	49 f1       	breq	.+82     	; 0x109e <Dio_init+0xa6>
    104c:	2e 81       	ldd	r18, Y+6	; 0x06
    104e:	3f 81       	ldd	r19, Y+7	; 0x07
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	2c f4       	brge	.+10     	; 0x1060 <Dio_init+0x68>
    1056:	8e 81       	ldd	r24, Y+6	; 0x06
    1058:	9f 81       	ldd	r25, Y+7	; 0x07
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	61 f0       	breq	.+24     	; 0x1076 <Dio_init+0x7e>
    105e:	ce c0       	rjmp	.+412    	; 0x11fc <Dio_init+0x204>
    1060:	2e 81       	ldd	r18, Y+6	; 0x06
    1062:	3f 81       	ldd	r19, Y+7	; 0x07
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	71 f1       	breq	.+92     	; 0x10c6 <Dio_init+0xce>
    106a:	8e 81       	ldd	r24, Y+6	; 0x06
    106c:	9f 81       	ldd	r25, Y+7	; 0x07
    106e:	83 30       	cpi	r24, 0x03	; 3
    1070:	91 05       	cpc	r25, r1
    1072:	e9 f1       	breq	.+122    	; 0x10ee <Dio_init+0xf6>
    1074:	c3 c0       	rjmp	.+390    	; 0x11fc <Dio_init+0x204>
			{
				case Dio_Port_A:
				SET_BIT(DDRA_REG,currentPin);
    1076:	aa e3       	ldi	r26, 0x3A	; 58
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ea e3       	ldi	r30, 0x3A	; 58
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <Dio_init+0x9c>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <Dio_init+0x98>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	af c0       	rjmp	.+350    	; 0x11fc <Dio_init+0x204>
				break;
				case Dio_Port_B:
				SET_BIT(DDRB_REG,currentPin);
    109e:	a7 e3       	ldi	r26, 0x37	; 55
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e7 e3       	ldi	r30, 0x37	; 55
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <Dio_init+0xc4>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <Dio_init+0xc0>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	9b c0       	rjmp	.+310    	; 0x11fc <Dio_init+0x204>
				break;
				case Dio_Port_C:
				SET_BIT(DDRC_REG,currentPin);
    10c6:	a4 e3       	ldi	r26, 0x34	; 52
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e4 e3       	ldi	r30, 0x34	; 52
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <Dio_init+0xec>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <Dio_init+0xe8>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	87 c0       	rjmp	.+270    	; 0x11fc <Dio_init+0x204>
				break;
				case Dio_Port_D:
				SET_BIT(DDRD_REG,currentPin);
    10ee:	a1 e3       	ldi	r26, 0x31	; 49
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e1 e3       	ldi	r30, 0x31	; 49
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <Dio_init+0x114>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <Dio_init+0x110>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	73 c0       	rjmp	.+230    	; 0x11fc <Dio_init+0x204>
				break;
			}//switch
		}//if
		else
		{
			switch (currentPort)
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3d 83       	std	Y+5, r19	; 0x05
    111e:	2c 83       	std	Y+4, r18	; 0x04
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	9d 81       	ldd	r25, Y+5	; 0x05
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	91 05       	cpc	r25, r1
    1128:	59 f1       	breq	.+86     	; 0x1180 <Dio_init+0x188>
    112a:	2c 81       	ldd	r18, Y+4	; 0x04
    112c:	3d 81       	ldd	r19, Y+5	; 0x05
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	2c f4       	brge	.+10     	; 0x113e <Dio_init+0x146>
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	69 f0       	breq	.+26     	; 0x1156 <Dio_init+0x15e>
    113c:	5f c0       	rjmp	.+190    	; 0x11fc <Dio_init+0x204>
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	89 f1       	breq	.+98     	; 0x11aa <Dio_init+0x1b2>
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	83 30       	cpi	r24, 0x03	; 3
    114e:	91 05       	cpc	r25, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <Dio_init+0x15c>
    1152:	40 c0       	rjmp	.+128    	; 0x11d4 <Dio_init+0x1dc>
    1154:	53 c0       	rjmp	.+166    	; 0x11fc <Dio_init+0x204>
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,currentPin);
    1156:	aa e3       	ldi	r26, 0x3A	; 58
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ea e3       	ldi	r30, 0x3A	; 58
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <Dio_init+0x17c>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <Dio_init+0x178>
    1178:	80 95       	com	r24
    117a:	84 23       	and	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	3e c0       	rjmp	.+124    	; 0x11fc <Dio_init+0x204>
				break;
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,currentPin);
    1180:	a7 e3       	ldi	r26, 0x37	; 55
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e7 e3       	ldi	r30, 0x37	; 55
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <Dio_init+0x1a6>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <Dio_init+0x1a2>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	29 c0       	rjmp	.+82     	; 0x11fc <Dio_init+0x204>
				break;
				case Dio_Port_C:
				CLR_BIT(DDRC_REG,currentPin);
    11aa:	a4 e3       	ldi	r26, 0x34	; 52
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e4 e3       	ldi	r30, 0x34	; 52
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <Dio_init+0x1d0>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <Dio_init+0x1cc>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <Dio_init+0x204>
				break;
				case Dio_Port_D:
				CLR_BIT(DDRD_REG,currentPin);
    11d4:	a1 e3       	ldi	r26, 0x31	; 49
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e1 e3       	ldi	r30, 0x31	; 49
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <Dio_init+0x1fa>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <Dio_init+0x1f6>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
void Dio_init(void)
{
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	8b 83       	std	Y+3, r24	; 0x03
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	80 32       	cpi	r24, 0x20	; 32
    1206:	08 f4       	brcc	.+2      	; 0x120a <Dio_init+0x212>
    1208:	03 cf       	rjmp	.-506    	; 0x1010 <Dio_init+0x18>
				break;
			}//switch
			
		}//else
	}//for
}//func
    120a:	27 96       	adiw	r28, 0x07	; 7
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <checkCols>:
#include "dio.h"

extern const uint8 Keypad_Map[16];
uint8 keypressed=KEY_RELEASE;

static void checkCols(uint8 row){
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	89 83       	std	Y+1, r24	; 0x01

	if(DioReadChannel(COL1_PIN)==STD_low){
    1228:	83 e1       	ldi	r24, 0x13	; 19
    122a:	0e 94 7b 07 	call	0xef6	; 0xef6 <DioReadChannel>
    122e:	88 23       	and	r24, r24
    1230:	51 f4       	brne	.+20     	; 0x1246 <checkCols+0x2a>
		keypressed= row*COL_NUM;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	80 93 68 00 	sts	0x0068, r24
    1244:	2f c0       	rjmp	.+94     	; 0x12a4 <checkCols+0x88>
	}
	else if(DioReadChannel(COL2_PIN)==STD_low){
    1246:	84 e1       	ldi	r24, 0x14	; 20
    1248:	0e 94 7b 07 	call	0xef6	; 0xef6 <DioReadChannel>
    124c:	88 23       	and	r24, r24
    124e:	59 f4       	brne	.+22     	; 0x1266 <checkCols+0x4a>
		keypressed= (row*COL_NUM)+COL2;
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	8f 5f       	subi	r24, 0xFF	; 255
    1260:	80 93 68 00 	sts	0x0068, r24
    1264:	1f c0       	rjmp	.+62     	; 0x12a4 <checkCols+0x88>
	}
	else if(DioReadChannel(COL3_PIN)==STD_low){
    1266:	85 e1       	ldi	r24, 0x15	; 21
    1268:	0e 94 7b 07 	call	0xef6	; 0xef6 <DioReadChannel>
    126c:	88 23       	and	r24, r24
    126e:	59 f4       	brne	.+22     	; 0x1286 <checkCols+0x6a>
			keypressed= (row*COL_NUM)+COL3;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	80 93 68 00 	sts	0x0068, r24
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <checkCols+0x88>
		}
	else if(DioReadChannel(COL4_PIN)==STD_low){
    1286:	86 e1       	ldi	r24, 0x16	; 22
    1288:	0e 94 7b 07 	call	0xef6	; 0xef6 <DioReadChannel>
    128c:	88 23       	and	r24, r24
    128e:	51 f4       	brne	.+20     	; 0x12a4 <checkCols+0x88>
				keypressed= (row*COL_NUM)+COL4;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	8d 5f       	subi	r24, 0xFD	; 253
    12a0:	80 93 68 00 	sts	0x0068, r24
	   }


}//function
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <GetKeypressed>:

uint8 GetKeypressed(){
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	 keypressed=KEY_RELEASE;
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	80 93 68 00 	sts	0x0068, r24
	Dio_WriteChannel(ROW1_PIN,STD_low);
    12bc:	8d e0       	ldi	r24, 0x0D	; 13
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW2_PIN,STD_high);
    12c4:	8e e0       	ldi	r24, 0x0E	; 14
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW3_PIN,STD_high);
    12cc:	8f e0       	ldi	r24, 0x0F	; 15
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW4_PIN,STD_high);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	checkCols(ROW1);
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	0e 94 0e 09 	call	0x121c	; 0x121c <checkCols>
	Dio_WriteChannel(ROW1_PIN,STD_high);
    12e2:	8d e0       	ldi	r24, 0x0D	; 13
    12e4:	61 e0       	ldi	r22, 0x01	; 1
    12e6:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW2_PIN,STD_low);
    12ea:	8e e0       	ldi	r24, 0x0E	; 14
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW3_PIN,STD_high);
    12f2:	8f e0       	ldi	r24, 0x0F	; 15
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW4_PIN,STD_high);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	checkCols(ROW2);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	0e 94 0e 09 	call	0x121c	; 0x121c <checkCols>
	Dio_WriteChannel(ROW1_PIN,STD_high);
    1308:	8d e0       	ldi	r24, 0x0D	; 13
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW2_PIN,STD_high);
    1310:	8e e0       	ldi	r24, 0x0E	; 14
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW3_PIN,STD_low);
    1318:	8f e0       	ldi	r24, 0x0F	; 15
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW4_PIN,STD_high);
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	checkCols(ROW3);
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	0e 94 0e 09 	call	0x121c	; 0x121c <checkCols>
	Dio_WriteChannel(ROW1_PIN,STD_high);
    132e:	8d e0       	ldi	r24, 0x0D	; 13
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW2_PIN,STD_high);
    1336:	8e e0       	ldi	r24, 0x0E	; 14
    1338:	61 e0       	ldi	r22, 0x01	; 1
    133a:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW3_PIN,STD_high);
    133e:	8f e0       	ldi	r24, 0x0F	; 15
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(ROW4_PIN,STD_low);
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	checkCols(ROW4);
    134e:	83 e0       	ldi	r24, 0x03	; 3
    1350:	0e 94 0e 09 	call	0x121c	; 0x121c <checkCols>

return keypressed==KEY_RELEASE? KEY_RELEASE:Keypad_Map[keypressed];
    1354:	80 91 68 00 	lds	r24, 0x0068
    1358:	8f 3f       	cpi	r24, 0xFF	; 255
    135a:	51 f0       	breq	.+20     	; 0x1370 <GetKeypressed+0xc4>
    135c:	80 91 68 00 	lds	r24, 0x0068
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	fc 01       	movw	r30, r24
    1366:	e6 54       	subi	r30, 0x46	; 70
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	80 81       	ld	r24, Z
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GetKeypressed+0xc8>
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	89 81       	ldd	r24, Y+1	; 0x01
}
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <LCD_Init>:
Send 0x28 command which configures LCD in 2-line, 4-bit mode and 5x8 dots.
Send any Display ON command (0x0E, 0x0C)
Send 0x06 command (increment cursor)
*/
void LCD_Init (void)  /* LCD Initialize function */
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	2e 97       	sbiw	r28, 0x0e	; 14
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(RW,STD_low);
    1392:	8a e0       	ldi	r24, 0x0A	; 10
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 ea       	ldi	r26, 0xA0	; 160
    13a0:	b1 e4       	ldi	r27, 0x41	; 65
    13a2:	8b 87       	std	Y+11, r24	; 0x0b
    13a4:	9c 87       	std	Y+12, r25	; 0x0c
    13a6:	ad 87       	std	Y+13, r26	; 0x0d
    13a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a e7       	ldi	r20, 0x7A	; 122
    13b8:	55 e4       	ldi	r21, 0x45	; 69
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8f 83       	std	Y+7, r24	; 0x07
    13c4:	98 87       	std	Y+8, r25	; 0x08
    13c6:	a9 87       	std	Y+9, r26	; 0x09
    13c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ca:	6f 81       	ldd	r22, Y+7	; 0x07
    13cc:	78 85       	ldd	r23, Y+8	; 0x08
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <LCD_Init+0x6e>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9e 83       	std	Y+6, r25	; 0x06
    13e8:	8d 83       	std	Y+5, r24	; 0x05
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <LCD_Init+0xec>
	else if (__tmp > 65535)
    13ec:	6f 81       	ldd	r22, Y+7	; 0x07
    13ee:	78 85       	ldd	r23, Y+8	; 0x08
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	6b 85       	ldd	r22, Y+11	; 0x0b
    1406:	7c 85       	ldd	r23, Y+12	; 0x0c
    1408:	8d 85       	ldd	r24, Y+13	; 0x0d
    140a:	9e 85       	ldd	r25, Y+14	; 0x0e
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	0f c0       	rjmp	.+30     	; 0x144c <LCD_Init+0xce>
    142e:	80 e9       	ldi	r24, 0x90	; 144
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <LCD_Init+0xbc>
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <LCD_Init+0xb0>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <LCD_Init+0xf8>
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x33); //3 3 3 2
    147e:	83 e3       	ldi	r24, 0x33	; 51
    1480:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
	LCD_Command(0x32);	/* Send for 4 bit initialization of LCD  */
    1484:	82 e3       	ldi	r24, 0x32	; 50
    1486:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
	LCD_Command(0x28);	/* 2 line, 5*8 matrix in 4-bit mode */
    148a:	88 e2       	ldi	r24, 0x28	; 40
    148c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
	LCD_Command(0x0c);	/* Display on cursor off */
    1490:	8c e0       	ldi	r24, 0x0C	; 12
    1492:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
	LCD_Command(0x06);	/* Increment cursor (shift cursor to right) */
    1496:	86 e0       	ldi	r24, 0x06	; 6
    1498:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
	LCD_Command(0x01);	/* Clear display screen */
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
}
    14a2:	2e 96       	adiw	r28, 0x0e	; 14
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <LCD_Command>:
Give High to Low pulse at Enable (E).
Send lower nibble of command.
Give High to Low pulse at Enable (E).
*/
void LCD_Command( unsigned char cmnd )
{
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	c7 55       	subi	r28, 0x57	; 87
    14c2:	d0 40       	sbci	r29, 0x00	; 0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	fe 01       	movw	r30, r28
    14d0:	e9 5a       	subi	r30, 0xA9	; 169
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 83       	st	Z, r24
	//LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);/* Sending upper nibble */
	Dio_WritePort(Dio_Port_A,((LCD_Port & 0x0F) | (cmnd & 0xF0)));
    14d6:	eb e3       	ldi	r30, 0x3B	; 59
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	98 2f       	mov	r25, r24
    14de:	9f 70       	andi	r25, 0x0F	; 15
    14e0:	fe 01       	movw	r30, r28
    14e2:	e9 5a       	subi	r30, 0xA9	; 169
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	80 7f       	andi	r24, 0xF0	; 240
    14ea:	89 2b       	or	r24, r25
    14ec:	98 2f       	mov	r25, r24
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	69 2f       	mov	r22, r25
    14f2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_WritePort>
	Dio_WriteChannel(RS,STD_low);/* RS=0, command reg. */
    14f6:	89 e0       	ldi	r24, 0x09	; 9
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	 Dio_WriteChannel(EN,STD_high);		/* Enable pulse */
    14fe:	8b e0       	ldi	r24, 0x0B	; 11
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    1506:	fe 01       	movw	r30, r28
    1508:	ed 5a       	subi	r30, 0xAD	; 173
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	a0 e2       	ldi	r26, 0x20	; 32
    1512:	b1 e4       	ldi	r27, 0x41	; 65
    1514:	80 83       	st	Z, r24
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	a2 83       	std	Z+2, r26	; 0x02
    151a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    151c:	8e 01       	movw	r16, r28
    151e:	01 5b       	subi	r16, 0xB1	; 177
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
    1522:	fe 01       	movw	r30, r28
    1524:	ed 5a       	subi	r30, 0xAD	; 173
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	2b ea       	ldi	r18, 0xAB	; 171
    1532:	3a ea       	ldi	r19, 0xAA	; 170
    1534:	4a ea       	ldi	r20, 0xAA	; 170
    1536:	50 e4       	ldi	r21, 0x40	; 64
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	f8 01       	movw	r30, r16
    1542:	80 83       	st	Z, r24
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	a2 83       	std	Z+2, r26	; 0x02
    1548:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    154a:	fe 01       	movw	r30, r28
    154c:	e1 5b       	subi	r30, 0xB1	; 177
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	34 f4       	brge	.+12     	; 0x1574 <LCD_Command+0xc0>
		__ticks = 1;
    1568:	fe 01       	movw	r30, r28
    156a:	e2 5b       	subi	r30, 0xB2	; 178
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	80 83       	st	Z, r24
    1572:	e0 c0       	rjmp	.+448    	; 0x1734 <LCD_Command+0x280>
	else if (__tmp > 255)
    1574:	fe 01       	movw	r30, r28
    1576:	e1 5b       	subi	r30, 0xB1	; 177
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	82 81       	ldd	r24, Z+2	; 0x02
    1580:	93 81       	ldd	r25, Z+3	; 0x03
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	53 e4       	ldi	r21, 0x43	; 67
    158a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	0c f0       	brlt	.+2      	; 0x1594 <LCD_Command+0xe0>
    1592:	c0 c0       	rjmp	.+384    	; 0x1714 <LCD_Command+0x260>
	{
		_delay_ms(__us / 1000.0);
    1594:	fe 01       	movw	r30, r28
    1596:	ed 5a       	subi	r30, 0xAD	; 173
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	4a e7       	ldi	r20, 0x7A	; 122
    15a8:	54 e4       	ldi	r21, 0x44	; 68
    15aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	fe 01       	movw	r30, r28
    15b4:	e6 5b       	subi	r30, 0xB6	; 182
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 83       	st	Z, r24
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	a2 83       	std	Z+2, r26	; 0x02
    15be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	8e 01       	movw	r16, r28
    15c2:	0a 5b       	subi	r16, 0xBA	; 186
    15c4:	1f 4f       	sbci	r17, 0xFF	; 255
    15c6:	fe 01       	movw	r30, r28
    15c8:	e6 5b       	subi	r30, 0xB6	; 182
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	60 81       	ld	r22, Z
    15ce:	71 81       	ldd	r23, Z+1	; 0x01
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	93 81       	ldd	r25, Z+3	; 0x03
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a e7       	ldi	r20, 0x7A	; 122
    15da:	55 e4       	ldi	r21, 0x45	; 69
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	80 83       	st	Z, r24
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	a2 83       	std	Z+2, r26	; 0x02
    15ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ee:	fe 01       	movw	r30, r28
    15f0:	ea 5b       	subi	r30, 0xBA	; 186
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e8       	ldi	r20, 0x80	; 128
    1602:	5f e3       	ldi	r21, 0x3F	; 63
    1604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1608:	88 23       	and	r24, r24
    160a:	44 f4       	brge	.+16     	; 0x161c <LCD_Command+0x168>
		__ticks = 1;
    160c:	fe 01       	movw	r30, r28
    160e:	ec 5b       	subi	r30, 0xBC	; 188
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	91 83       	std	Z+1, r25	; 0x01
    1618:	80 83       	st	Z, r24
    161a:	64 c0       	rjmp	.+200    	; 0x16e4 <LCD_Command+0x230>
	else if (__tmp > 65535)
    161c:	fe 01       	movw	r30, r28
    161e:	ea 5b       	subi	r30, 0xBA	; 186
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	60 81       	ld	r22, Z
    1624:	71 81       	ldd	r23, Z+1	; 0x01
    1626:	82 81       	ldd	r24, Z+2	; 0x02
    1628:	93 81       	ldd	r25, Z+3	; 0x03
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	0c f0       	brlt	.+2      	; 0x163c <LCD_Command+0x188>
    163a:	43 c0       	rjmp	.+134    	; 0x16c2 <LCD_Command+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163c:	fe 01       	movw	r30, r28
    163e:	e6 5b       	subi	r30, 0xB6	; 182
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	82 81       	ldd	r24, Z+2	; 0x02
    1648:	93 81       	ldd	r25, Z+3	; 0x03
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8e 01       	movw	r16, r28
    165c:	0c 5b       	subi	r16, 0xBC	; 188
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	f8 01       	movw	r30, r16
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	1f c0       	rjmp	.+62     	; 0x16b2 <LCD_Command+0x1fe>
    1674:	fe 01       	movw	r30, r28
    1676:	ee 5b       	subi	r30, 0xBE	; 190
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	80 e9       	ldi	r24, 0x90	; 144
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	fe 01       	movw	r30, r28
    1684:	ee 5b       	subi	r30, 0xBE	; 190
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <LCD_Command+0x1d8>
    1690:	fe 01       	movw	r30, r28
    1692:	ee 5b       	subi	r30, 0xBE	; 190
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	de 01       	movw	r26, r28
    169c:	ac 5b       	subi	r26, 0xBC	; 188
    169e:	bf 4f       	sbci	r27, 0xFF	; 255
    16a0:	fe 01       	movw	r30, r28
    16a2:	ec 5b       	subi	r30, 0xBC	; 188
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	11 96       	adiw	r26, 0x01	; 1
    16ae:	9c 93       	st	X, r25
    16b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	fe 01       	movw	r30, r28
    16b4:	ec 5b       	subi	r30, 0xBC	; 188
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	d1 f6       	brne	.-76     	; 0x1674 <LCD_Command+0x1c0>
    16c0:	42 c0       	rjmp	.+132    	; 0x1746 <LCD_Command+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	8e 01       	movw	r16, r28
    16c4:	0c 5b       	subi	r16, 0xBC	; 188
    16c6:	1f 4f       	sbci	r17, 0xFF	; 255
    16c8:	fe 01       	movw	r30, r28
    16ca:	ea 5b       	subi	r30, 0xBA	; 186
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	f8 01       	movw	r30, r16
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	de 01       	movw	r26, r28
    16e6:	a0 5c       	subi	r26, 0xC0	; 192
    16e8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ea:	fe 01       	movw	r30, r28
    16ec:	ec 5b       	subi	r30, 0xBC	; 188
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	91 81       	ldd	r25, Z+1	; 0x01
    16f4:	11 96       	adiw	r26, 0x01	; 1
    16f6:	9c 93       	st	X, r25
    16f8:	8e 93       	st	-X, r24
    16fa:	fe 01       	movw	r30, r28
    16fc:	e0 5c       	subi	r30, 0xC0	; 192
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <LCD_Command+0x250>
    1708:	fe 01       	movw	r30, r28
    170a:	e0 5c       	subi	r30, 0xC0	; 192
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	80 83       	st	Z, r24
    1712:	19 c0       	rjmp	.+50     	; 0x1746 <LCD_Command+0x292>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1714:	8e 01       	movw	r16, r28
    1716:	02 5b       	subi	r16, 0xB2	; 178
    1718:	1f 4f       	sbci	r17, 0xFF	; 255
    171a:	fe 01       	movw	r30, r28
    171c:	e1 5b       	subi	r30, 0xB1	; 177
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	f8 01       	movw	r30, r16
    1732:	80 83       	st	Z, r24
    1734:	fe 01       	movw	r30, r28
    1736:	e2 5b       	subi	r30, 0xB2	; 178
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	80 81       	ld	r24, Z
    173c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    173e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1740:	8a 95       	dec	r24
    1742:	f1 f7       	brne	.-4      	; 0x1740 <LCD_Command+0x28c>
    1744:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(10);
	 Dio_WriteChannel(EN,STD_low);
    1746:	8b e0       	ldi	r24, 0x0B	; 11
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	aa ef       	ldi	r26, 0xFA	; 250
    1754:	b4 e4       	ldi	r27, 0x44	; 68
    1756:	8b af       	std	Y+59, r24	; 0x3b
    1758:	9c af       	std	Y+60, r25	; 0x3c
    175a:	ad af       	std	Y+61, r26	; 0x3d
    175c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    175e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1760:	7c ad       	ldd	r23, Y+60	; 0x3c
    1762:	8d ad       	ldd	r24, Y+61	; 0x3d
    1764:	9e ad       	ldd	r25, Y+62	; 0x3e
    1766:	2b ea       	ldi	r18, 0xAB	; 171
    1768:	3a ea       	ldi	r19, 0xAA	; 170
    176a:	4a ea       	ldi	r20, 0xAA	; 170
    176c:	50 e4       	ldi	r21, 0x40	; 64
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	8f ab       	std	Y+55, r24	; 0x37
    1778:	98 af       	std	Y+56, r25	; 0x38
    177a:	a9 af       	std	Y+57, r26	; 0x39
    177c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    177e:	6f a9       	ldd	r22, Y+55	; 0x37
    1780:	78 ad       	ldd	r23, Y+56	; 0x38
    1782:	89 ad       	ldd	r24, Y+57	; 0x39
    1784:	9a ad       	ldd	r25, Y+58	; 0x3a
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e8       	ldi	r20, 0x80	; 128
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1792:	88 23       	and	r24, r24
    1794:	1c f4       	brge	.+6      	; 0x179c <LCD_Command+0x2e8>
		__ticks = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	8e ab       	std	Y+54, r24	; 0x36
    179a:	91 c0       	rjmp	.+290    	; 0x18be <LCD_Command+0x40a>
	else if (__tmp > 255)
    179c:	6f a9       	ldd	r22, Y+55	; 0x37
    179e:	78 ad       	ldd	r23, Y+56	; 0x38
    17a0:	89 ad       	ldd	r24, Y+57	; 0x39
    17a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	53 e4       	ldi	r21, 0x43	; 67
    17ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	0c f0       	brlt	.+2      	; 0x17b6 <LCD_Command+0x302>
    17b4:	7b c0       	rjmp	.+246    	; 0x18ac <LCD_Command+0x3f8>
	{
		_delay_ms(__us / 1000.0);
    17b6:	6b ad       	ldd	r22, Y+59	; 0x3b
    17b8:	7c ad       	ldd	r23, Y+60	; 0x3c
    17ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    17bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	4a e7       	ldi	r20, 0x7A	; 122
    17c4:	54 e4       	ldi	r21, 0x44	; 68
    17c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	8a ab       	std	Y+50, r24	; 0x32
    17d0:	9b ab       	std	Y+51, r25	; 0x33
    17d2:	ac ab       	std	Y+52, r26	; 0x34
    17d4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d6:	6a a9       	ldd	r22, Y+50	; 0x32
    17d8:	7b a9       	ldd	r23, Y+51	; 0x33
    17da:	8c a9       	ldd	r24, Y+52	; 0x34
    17dc:	9d a9       	ldd	r25, Y+53	; 0x35
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	4a e7       	ldi	r20, 0x7A	; 122
    17e4:	55 e4       	ldi	r21, 0x45	; 69
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	8e a7       	std	Y+46, r24	; 0x2e
    17f0:	9f a7       	std	Y+47, r25	; 0x2f
    17f2:	a8 ab       	std	Y+48, r26	; 0x30
    17f4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    17f6:	6e a5       	ldd	r22, Y+46	; 0x2e
    17f8:	7f a5       	ldd	r23, Y+47	; 0x2f
    17fa:	88 a9       	ldd	r24, Y+48	; 0x30
    17fc:	99 a9       	ldd	r25, Y+49	; 0x31
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e8       	ldi	r20, 0x80	; 128
    1804:	5f e3       	ldi	r21, 0x3F	; 63
    1806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180a:	88 23       	and	r24, r24
    180c:	2c f4       	brge	.+10     	; 0x1818 <LCD_Command+0x364>
		__ticks = 1;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	9d a7       	std	Y+45, r25	; 0x2d
    1814:	8c a7       	std	Y+44, r24	; 0x2c
    1816:	3f c0       	rjmp	.+126    	; 0x1896 <LCD_Command+0x3e2>
	else if (__tmp > 65535)
    1818:	6e a5       	ldd	r22, Y+46	; 0x2e
    181a:	7f a5       	ldd	r23, Y+47	; 0x2f
    181c:	88 a9       	ldd	r24, Y+48	; 0x30
    181e:	99 a9       	ldd	r25, Y+49	; 0x31
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	4f e7       	ldi	r20, 0x7F	; 127
    1826:	57 e4       	ldi	r21, 0x47	; 71
    1828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182c:	18 16       	cp	r1, r24
    182e:	4c f5       	brge	.+82     	; 0x1882 <LCD_Command+0x3ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1830:	6a a9       	ldd	r22, Y+50	; 0x32
    1832:	7b a9       	ldd	r23, Y+51	; 0x33
    1834:	8c a9       	ldd	r24, Y+52	; 0x34
    1836:	9d a9       	ldd	r25, Y+53	; 0x35
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e2       	ldi	r20, 0x20	; 32
    183e:	51 e4       	ldi	r21, 0x41	; 65
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	9d a7       	std	Y+45, r25	; 0x2d
    1856:	8c a7       	std	Y+44, r24	; 0x2c
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <LCD_Command+0x3c4>
    185a:	80 e9       	ldi	r24, 0x90	; 144
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	9b a7       	std	Y+43, r25	; 0x2b
    1860:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1862:	8a a5       	ldd	r24, Y+42	; 0x2a
    1864:	9b a5       	ldd	r25, Y+43	; 0x2b
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <LCD_Command+0x3b2>
    186a:	9b a7       	std	Y+43, r25	; 0x2b
    186c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1870:	9d a5       	ldd	r25, Y+45	; 0x2d
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	9d a7       	std	Y+45, r25	; 0x2d
    1876:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1878:	8c a5       	ldd	r24, Y+44	; 0x2c
    187a:	9d a5       	ldd	r25, Y+45	; 0x2d
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	69 f7       	brne	.-38     	; 0x185a <LCD_Command+0x3a6>
    1880:	24 c0       	rjmp	.+72     	; 0x18ca <LCD_Command+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1882:	6e a5       	ldd	r22, Y+46	; 0x2e
    1884:	7f a5       	ldd	r23, Y+47	; 0x2f
    1886:	88 a9       	ldd	r24, Y+48	; 0x30
    1888:	99 a9       	ldd	r25, Y+49	; 0x31
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9d a7       	std	Y+45, r25	; 0x2d
    1894:	8c a7       	std	Y+44, r24	; 0x2c
    1896:	8c a5       	ldd	r24, Y+44	; 0x2c
    1898:	9d a5       	ldd	r25, Y+45	; 0x2d
    189a:	99 a7       	std	Y+41, r25	; 0x29
    189c:	88 a7       	std	Y+40, r24	; 0x28
    189e:	88 a5       	ldd	r24, Y+40	; 0x28
    18a0:	99 a5       	ldd	r25, Y+41	; 0x29
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_Command+0x3ee>
    18a6:	99 a7       	std	Y+41, r25	; 0x29
    18a8:	88 a7       	std	Y+40, r24	; 0x28
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <LCD_Command+0x416>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18ac:	6f a9       	ldd	r22, Y+55	; 0x37
    18ae:	78 ad       	ldd	r23, Y+56	; 0x38
    18b0:	89 ad       	ldd	r24, Y+57	; 0x39
    18b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8e ab       	std	Y+54, r24	; 0x36
    18be:	8e a9       	ldd	r24, Y+54	; 0x36
    18c0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18c2:	8f a1       	ldd	r24, Y+39	; 0x27
    18c4:	8a 95       	dec	r24
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <LCD_Command+0x410>
    18c8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(2000);
	//LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);/* Sending lower nibble */
	Dio_WritePort(Dio_Port_A,((LCD_Port & 0x0F) | (cmnd << 4)));
    18ca:	eb e3       	ldi	r30, 0x3B	; 59
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	28 2f       	mov	r18, r24
    18d2:	2f 70       	andi	r18, 0x0F	; 15
    18d4:	fe 01       	movw	r30, r28
    18d6:	e9 5a       	subi	r30, 0xA9	; 169
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	82 95       	swap	r24
    18e2:	92 95       	swap	r25
    18e4:	90 7f       	andi	r25, 0xF0	; 240
    18e6:	98 27       	eor	r25, r24
    18e8:	80 7f       	andi	r24, 0xF0	; 240
    18ea:	98 27       	eor	r25, r24
    18ec:	82 2b       	or	r24, r18
    18ee:	98 2f       	mov	r25, r24
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	69 2f       	mov	r22, r25
    18f4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_WritePort>
	Dio_WriteChannel(EN,STD_high);	
    18f8:	8b e0       	ldi	r24, 0x0B	; 11
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e8       	ldi	r26, 0x80	; 128
    1906:	bf e3       	ldi	r27, 0x3F	; 63
    1908:	8b a3       	std	Y+35, r24	; 0x23
    190a:	9c a3       	std	Y+36, r25	; 0x24
    190c:	ad a3       	std	Y+37, r26	; 0x25
    190e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1910:	6b a1       	ldd	r22, Y+35	; 0x23
    1912:	7c a1       	ldd	r23, Y+36	; 0x24
    1914:	8d a1       	ldd	r24, Y+37	; 0x25
    1916:	9e a1       	ldd	r25, Y+38	; 0x26
    1918:	2b ea       	ldi	r18, 0xAB	; 171
    191a:	3a ea       	ldi	r19, 0xAA	; 170
    191c:	4a ea       	ldi	r20, 0xAA	; 170
    191e:	50 e4       	ldi	r21, 0x40	; 64
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8f 8f       	std	Y+31, r24	; 0x1f
    192a:	98 a3       	std	Y+32, r25	; 0x20
    192c:	a9 a3       	std	Y+33, r26	; 0x21
    192e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1930:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1932:	78 a1       	ldd	r23, Y+32	; 0x20
    1934:	89 a1       	ldd	r24, Y+33	; 0x21
    1936:	9a a1       	ldd	r25, Y+34	; 0x22
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	1c f4       	brge	.+6      	; 0x194e <LCD_Command+0x49a>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	8e 8f       	std	Y+30, r24	; 0x1e
    194c:	91 c0       	rjmp	.+290    	; 0x1a70 <LCD_Command+0x5bc>
	else if (__tmp > 255)
    194e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1950:	78 a1       	ldd	r23, Y+32	; 0x20
    1952:	89 a1       	ldd	r24, Y+33	; 0x21
    1954:	9a a1       	ldd	r25, Y+34	; 0x22
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	53 e4       	ldi	r21, 0x43	; 67
    195e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	0c f0       	brlt	.+2      	; 0x1968 <LCD_Command+0x4b4>
    1966:	7b c0       	rjmp	.+246    	; 0x1a5e <LCD_Command+0x5aa>
	{
		_delay_ms(__us / 1000.0);
    1968:	6b a1       	ldd	r22, Y+35	; 0x23
    196a:	7c a1       	ldd	r23, Y+36	; 0x24
    196c:	8d a1       	ldd	r24, Y+37	; 0x25
    196e:	9e a1       	ldd	r25, Y+38	; 0x26
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a e7       	ldi	r20, 0x7A	; 122
    1976:	54 e4       	ldi	r21, 0x44	; 68
    1978:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8a 8f       	std	Y+26, r24	; 0x1a
    1982:	9b 8f       	std	Y+27, r25	; 0x1b
    1984:	ac 8f       	std	Y+28, r26	; 0x1c
    1986:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	6a 8d       	ldd	r22, Y+26	; 0x1a
    198a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    198c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    198e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a e7       	ldi	r20, 0x7A	; 122
    1996:	55 e4       	ldi	r21, 0x45	; 69
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8e 8b       	std	Y+22, r24	; 0x16
    19a2:	9f 8b       	std	Y+23, r25	; 0x17
    19a4:	a8 8f       	std	Y+24, r26	; 0x18
    19a6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19a8:	6e 89       	ldd	r22, Y+22	; 0x16
    19aa:	7f 89       	ldd	r23, Y+23	; 0x17
    19ac:	88 8d       	ldd	r24, Y+24	; 0x18
    19ae:	99 8d       	ldd	r25, Y+25	; 0x19
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <LCD_Command+0x516>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9d 8b       	std	Y+21, r25	; 0x15
    19c6:	8c 8b       	std	Y+20, r24	; 0x14
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <LCD_Command+0x594>
	else if (__tmp > 65535)
    19ca:	6e 89       	ldd	r22, Y+22	; 0x16
    19cc:	7f 89       	ldd	r23, Y+23	; 0x17
    19ce:	88 8d       	ldd	r24, Y+24	; 0x18
    19d0:	99 8d       	ldd	r25, Y+25	; 0x19
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <LCD_Command+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19e4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9d 8b       	std	Y+21, r25	; 0x15
    1a08:	8c 8b       	std	Y+20, r24	; 0x14
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <LCD_Command+0x576>
    1a0c:	80 e9       	ldi	r24, 0x90	; 144
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	9b 8b       	std	Y+19, r25	; 0x13
    1a12:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a14:	8a 89       	ldd	r24, Y+18	; 0x12
    1a16:	9b 89       	ldd	r25, Y+19	; 0x13
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_Command+0x564>
    1a1c:	9b 8b       	std	Y+19, r25	; 0x13
    1a1e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8c 89       	ldd	r24, Y+20	; 0x14
    1a22:	9d 89       	ldd	r25, Y+21	; 0x15
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9d 8b       	std	Y+21, r25	; 0x15
    1a28:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a2c:	9d 89       	ldd	r25, Y+21	; 0x15
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <LCD_Command+0x558>
    1a32:	24 c0       	rjmp	.+72     	; 0x1a7c <LCD_Command+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6e 89       	ldd	r22, Y+22	; 0x16
    1a36:	7f 89       	ldd	r23, Y+23	; 0x17
    1a38:	88 8d       	ldd	r24, Y+24	; 0x18
    1a3a:	99 8d       	ldd	r25, Y+25	; 0x19
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9d 8b       	std	Y+21, r25	; 0x15
    1a46:	8c 8b       	std	Y+20, r24	; 0x14
    1a48:	8c 89       	ldd	r24, Y+20	; 0x14
    1a4a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a4c:	99 8b       	std	Y+17, r25	; 0x11
    1a4e:	88 8b       	std	Y+16, r24	; 0x10
    1a50:	88 89       	ldd	r24, Y+16	; 0x10
    1a52:	99 89       	ldd	r25, Y+17	; 0x11
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_Command+0x5a0>
    1a58:	99 8b       	std	Y+17, r25	; 0x11
    1a5a:	88 8b       	std	Y+16, r24	; 0x10
    1a5c:	0f c0       	rjmp	.+30     	; 0x1a7c <LCD_Command+0x5c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a5e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a60:	78 a1       	ldd	r23, Y+32	; 0x20
    1a62:	89 a1       	ldd	r24, Y+33	; 0x21
    1a64:	9a a1       	ldd	r25, Y+34	; 0x22
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a72:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a76:	8a 95       	dec	r24
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_Command+0x5c2>
    1a7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(EN,STD_low);
    1a7c:	8b e0       	ldi	r24, 0x0B	; 11
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a0 e0       	ldi	r26, 0x00	; 0
    1a8a:	b0 e4       	ldi	r27, 0x40	; 64
    1a8c:	8b 87       	std	Y+11, r24	; 0x0b
    1a8e:	9c 87       	std	Y+12, r25	; 0x0c
    1a90:	ad 87       	std	Y+13, r26	; 0x0d
    1a92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a e7       	ldi	r20, 0x7A	; 122
    1aa2:	55 e4       	ldi	r21, 0x45	; 69
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8f 83       	std	Y+7, r24	; 0x07
    1aae:	98 87       	std	Y+8, r25	; 0x08
    1ab0:	a9 87       	std	Y+9, r26	; 0x09
    1ab2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e8       	ldi	r20, 0x80	; 128
    1ac2:	5f e3       	ldi	r21, 0x3F	; 63
    1ac4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <LCD_Command+0x622>
		__ticks = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	3f c0       	rjmp	.+126    	; 0x1b54 <LCD_Command+0x6a0>
	else if (__tmp > 65535)
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	4f e7       	ldi	r20, 0x7F	; 127
    1ae4:	57 e4       	ldi	r21, 0x47	; 71
    1ae6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	4c f5       	brge	.+82     	; 0x1b40 <LCD_Command+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e2       	ldi	r20, 0x20	; 32
    1afc:	51 e4       	ldi	r21, 0x41	; 65
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <LCD_Command+0x682>
    1b18:	80 e9       	ldi	r24, 0x90	; 144
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	9c 83       	std	Y+4, r25	; 0x04
    1b1e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_Command+0x670>
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	69 f7       	brne	.-38     	; 0x1b18 <LCD_Command+0x664>
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <LCD_Command+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_Command+0x6ac>
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b68:	c9 5a       	subi	r28, 0xA9	; 169
    1b6a:	df 4f       	sbci	r29, 0xFF	; 255
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	08 95       	ret

00001b80 <LCD_Char>:
Give High to Low pulse at Enable (E).
Send lower nibble of data.
Give High to Low pulse at Enable (E).
*/
void LCD_Char( unsigned char data )
{
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	c7 55       	subi	r28, 0x57	; 87
    1b8e:	d0 40       	sbci	r29, 0x00	; 0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	f8 94       	cli
    1b94:	de bf       	out	0x3e, r29	; 62
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	cd bf       	out	0x3d, r28	; 61
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e9 5a       	subi	r30, 0xA9	; 169
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 83       	st	Z, r24
	//LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);/* Sending upper nibble */
	Dio_WritePort(Dio_Port_A,((LCD_Port & 0x0F) | (data & 0xF0)));
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	98 2f       	mov	r25, r24
    1baa:	9f 70       	andi	r25, 0x0F	; 15
    1bac:	fe 01       	movw	r30, r28
    1bae:	e9 5a       	subi	r30, 0xA9	; 169
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 7f       	andi	r24, 0xF0	; 240
    1bb6:	89 2b       	or	r24, r25
    1bb8:	98 2f       	mov	r25, r24
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	69 2f       	mov	r22, r25
    1bbe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_WritePort>
	Dio_WriteChannel(RS,STD_high);
    1bc2:	89 e0       	ldi	r24, 0x09	; 9
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
	Dio_WriteChannel(EN,STD_high);
    1bca:	8b e0       	ldi	r24, 0x0B	; 11
    1bcc:	61 e0       	ldi	r22, 0x01	; 1
    1bce:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ed 5a       	subi	r30, 0xAD	; 173
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e8       	ldi	r26, 0x80	; 128
    1bde:	bf e3       	ldi	r27, 0x3F	; 63
    1be0:	80 83       	st	Z, r24
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	a2 83       	std	Z+2, r26	; 0x02
    1be6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1be8:	8e 01       	movw	r16, r28
    1bea:	01 5b       	subi	r16, 0xB1	; 177
    1bec:	1f 4f       	sbci	r17, 0xFF	; 255
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ed 5a       	subi	r30, 0xAD	; 173
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	2b ea       	ldi	r18, 0xAB	; 171
    1bfe:	3a ea       	ldi	r19, 0xAA	; 170
    1c00:	4a ea       	ldi	r20, 0xAA	; 170
    1c02:	50 e4       	ldi	r21, 0x40	; 64
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	80 83       	st	Z, r24
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	a2 83       	std	Z+2, r26	; 0x02
    1c14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c16:	fe 01       	movw	r30, r28
    1c18:	e1 5b       	subi	r30, 0xB1	; 177
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	60 81       	ld	r22, Z
    1c1e:	71 81       	ldd	r23, Z+1	; 0x01
    1c20:	82 81       	ldd	r24, Z+2	; 0x02
    1c22:	93 81       	ldd	r25, Z+3	; 0x03
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e8       	ldi	r20, 0x80	; 128
    1c2a:	5f e3       	ldi	r21, 0x3F	; 63
    1c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c30:	88 23       	and	r24, r24
    1c32:	34 f4       	brge	.+12     	; 0x1c40 <LCD_Char+0xc0>
		__ticks = 1;
    1c34:	fe 01       	movw	r30, r28
    1c36:	e2 5b       	subi	r30, 0xB2	; 178
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	80 83       	st	Z, r24
    1c3e:	e0 c0       	rjmp	.+448    	; 0x1e00 <LCD_Char+0x280>
	else if (__tmp > 255)
    1c40:	fe 01       	movw	r30, r28
    1c42:	e1 5b       	subi	r30, 0xB1	; 177
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	53 e4       	ldi	r21, 0x43	; 67
    1c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	0c f0       	brlt	.+2      	; 0x1c60 <LCD_Char+0xe0>
    1c5e:	c0 c0       	rjmp	.+384    	; 0x1de0 <LCD_Char+0x260>
	{
		_delay_ms(__us / 1000.0);
    1c60:	fe 01       	movw	r30, r28
    1c62:	ed 5a       	subi	r30, 0xAD	; 173
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a e7       	ldi	r20, 0x7A	; 122
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	fe 01       	movw	r30, r28
    1c80:	e6 5b       	subi	r30, 0xB6	; 182
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 83       	st	Z, r24
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	a2 83       	std	Z+2, r26	; 0x02
    1c8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8c:	8e 01       	movw	r16, r28
    1c8e:	0a 5b       	subi	r16, 0xBA	; 186
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e6 5b       	subi	r30, 0xB6	; 182
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4a e7       	ldi	r20, 0x7A	; 122
    1ca6:	55 e4       	ldi	r21, 0x45	; 69
    1ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	80 83       	st	Z, r24
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	a2 83       	std	Z+2, r26	; 0x02
    1cb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cba:	fe 01       	movw	r30, r28
    1cbc:	ea 5b       	subi	r30, 0xBA	; 186
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	44 f4       	brge	.+16     	; 0x1ce8 <LCD_Char+0x168>
		__ticks = 1;
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ec 5b       	subi	r30, 0xBC	; 188
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
    1ce6:	64 c0       	rjmp	.+200    	; 0x1db0 <LCD_Char+0x230>
	else if (__tmp > 65535)
    1ce8:	fe 01       	movw	r30, r28
    1cea:	ea 5b       	subi	r30, 0xBA	; 186
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	0c f0       	brlt	.+2      	; 0x1d08 <LCD_Char+0x188>
    1d06:	43 c0       	rjmp	.+134    	; 0x1d8e <LCD_Char+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e6 5b       	subi	r30, 0xB6	; 182
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e2       	ldi	r20, 0x20	; 32
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8e 01       	movw	r16, r28
    1d28:	0c 5b       	subi	r16, 0xBC	; 188
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	f8 01       	movw	r30, r16
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
    1d3e:	1f c0       	rjmp	.+62     	; 0x1d7e <LCD_Char+0x1fe>
    1d40:	fe 01       	movw	r30, r28
    1d42:	ee 5b       	subi	r30, 0xBE	; 190
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 e9       	ldi	r24, 0x90	; 144
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ee 5b       	subi	r30, 0xBE	; 190
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	f1 f7       	brne	.-4      	; 0x1d58 <LCD_Char+0x1d8>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ee 5b       	subi	r30, 0xBE	; 190
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d66:	de 01       	movw	r26, r28
    1d68:	ac 5b       	subi	r26, 0xBC	; 188
    1d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ec 5b       	subi	r30, 0xBC	; 188
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	11 96       	adiw	r26, 0x01	; 1
    1d7a:	9c 93       	st	X, r25
    1d7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ec 5b       	subi	r30, 0xBC	; 188
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	d1 f6       	brne	.-76     	; 0x1d40 <LCD_Char+0x1c0>
    1d8c:	42 c0       	rjmp	.+132    	; 0x1e12 <LCD_Char+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	8e 01       	movw	r16, r28
    1d90:	0c 5b       	subi	r16, 0xBC	; 188
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	fe 01       	movw	r30, r28
    1d96:	ea 5b       	subi	r30, 0xBA	; 186
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	60 81       	ld	r22, Z
    1d9c:	71 81       	ldd	r23, Z+1	; 0x01
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	f8 01       	movw	r30, r16
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	80 83       	st	Z, r24
    1db0:	de 01       	movw	r26, r28
    1db2:	a0 5c       	subi	r26, 0xC0	; 192
    1db4:	bf 4f       	sbci	r27, 0xFF	; 255
    1db6:	fe 01       	movw	r30, r28
    1db8:	ec 5b       	subi	r30, 0xBC	; 188
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	11 96       	adiw	r26, 0x01	; 1
    1dc2:	9c 93       	st	X, r25
    1dc4:	8e 93       	st	-X, r24
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e0 5c       	subi	r30, 0xC0	; 192
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_Char+0x250>
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e0 5c       	subi	r30, 0xC0	; 192
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	80 83       	st	Z, r24
    1dde:	19 c0       	rjmp	.+50     	; 0x1e12 <LCD_Char+0x292>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1de0:	8e 01       	movw	r16, r28
    1de2:	02 5b       	subi	r16, 0xB2	; 178
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	e1 5b       	subi	r30, 0xB1	; 177
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	80 83       	st	Z, r24
    1e00:	fe 01       	movw	r30, r28
    1e02:	e2 5b       	subi	r30, 0xB2	; 178
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e0c:	8a 95       	dec	r24
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_Char+0x28c>
    1e10:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	Dio_WriteChannel(EN,STD_low);
    1e12:	8b e0       	ldi	r24, 0x0B	; 11
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	aa ef       	ldi	r26, 0xFA	; 250
    1e20:	b4 e4       	ldi	r27, 0x44	; 68
    1e22:	8b af       	std	Y+59, r24	; 0x3b
    1e24:	9c af       	std	Y+60, r25	; 0x3c
    1e26:	ad af       	std	Y+61, r26	; 0x3d
    1e28:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e2a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e2c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e30:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e32:	2b ea       	ldi	r18, 0xAB	; 171
    1e34:	3a ea       	ldi	r19, 0xAA	; 170
    1e36:	4a ea       	ldi	r20, 0xAA	; 170
    1e38:	50 e4       	ldi	r21, 0x40	; 64
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	8f ab       	std	Y+55, r24	; 0x37
    1e44:	98 af       	std	Y+56, r25	; 0x38
    1e46:	a9 af       	std	Y+57, r26	; 0x39
    1e48:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1e4a:	6f a9       	ldd	r22, Y+55	; 0x37
    1e4c:	78 ad       	ldd	r23, Y+56	; 0x38
    1e4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e8       	ldi	r20, 0x80	; 128
    1e58:	5f e3       	ldi	r21, 0x3F	; 63
    1e5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5e:	88 23       	and	r24, r24
    1e60:	1c f4       	brge	.+6      	; 0x1e68 <LCD_Char+0x2e8>
		__ticks = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	8e ab       	std	Y+54, r24	; 0x36
    1e66:	91 c0       	rjmp	.+290    	; 0x1f8a <LCD_Char+0x40a>
	else if (__tmp > 255)
    1e68:	6f a9       	ldd	r22, Y+55	; 0x37
    1e6a:	78 ad       	ldd	r23, Y+56	; 0x38
    1e6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	53 e4       	ldi	r21, 0x43	; 67
    1e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	0c f0       	brlt	.+2      	; 0x1e82 <LCD_Char+0x302>
    1e80:	7b c0       	rjmp	.+246    	; 0x1f78 <LCD_Char+0x3f8>
	{
		_delay_ms(__us / 1000.0);
    1e82:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e84:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a e7       	ldi	r20, 0x7A	; 122
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8a ab       	std	Y+50, r24	; 0x32
    1e9c:	9b ab       	std	Y+51, r25	; 0x33
    1e9e:	ac ab       	std	Y+52, r26	; 0x34
    1ea0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6a a9       	ldd	r22, Y+50	; 0x32
    1ea4:	7b a9       	ldd	r23, Y+51	; 0x33
    1ea6:	8c a9       	ldd	r24, Y+52	; 0x34
    1ea8:	9d a9       	ldd	r25, Y+53	; 0x35
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a e7       	ldi	r20, 0x7A	; 122
    1eb0:	55 e4       	ldi	r21, 0x45	; 69
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8e a7       	std	Y+46, r24	; 0x2e
    1ebc:	9f a7       	std	Y+47, r25	; 0x2f
    1ebe:	a8 ab       	std	Y+48, r26	; 0x30
    1ec0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ec2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ec4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ec6:	88 a9       	ldd	r24, Y+48	; 0x30
    1ec8:	99 a9       	ldd	r25, Y+49	; 0x31
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <LCD_Char+0x364>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9d a7       	std	Y+45, r25	; 0x2d
    1ee0:	8c a7       	std	Y+44, r24	; 0x2c
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <LCD_Char+0x3e2>
	else if (__tmp > 65535)
    1ee4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ee6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ee8:	88 a9       	ldd	r24, Y+48	; 0x30
    1eea:	99 a9       	ldd	r25, Y+49	; 0x31
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <LCD_Char+0x3ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6a a9       	ldd	r22, Y+50	; 0x32
    1efe:	7b a9       	ldd	r23, Y+51	; 0x33
    1f00:	8c a9       	ldd	r24, Y+52	; 0x34
    1f02:	9d a9       	ldd	r25, Y+53	; 0x35
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9d a7       	std	Y+45, r25	; 0x2d
    1f22:	8c a7       	std	Y+44, r24	; 0x2c
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <LCD_Char+0x3c4>
    1f26:	80 e9       	ldi	r24, 0x90	; 144
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	9b a7       	std	Y+43, r25	; 0x2b
    1f2c:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f2e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f30:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_Char+0x3b2>
    1f36:	9b a7       	std	Y+43, r25	; 0x2b
    1f38:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9d a7       	std	Y+45, r25	; 0x2d
    1f42:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f46:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <LCD_Char+0x3a6>
    1f4c:	24 c0       	rjmp	.+72     	; 0x1f96 <LCD_Char+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f50:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f52:	88 a9       	ldd	r24, Y+48	; 0x30
    1f54:	99 a9       	ldd	r25, Y+49	; 0x31
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9d a7       	std	Y+45, r25	; 0x2d
    1f60:	8c a7       	std	Y+44, r24	; 0x2c
    1f62:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f64:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f66:	99 a7       	std	Y+41, r25	; 0x29
    1f68:	88 a7       	std	Y+40, r24	; 0x28
    1f6a:	88 a5       	ldd	r24, Y+40	; 0x28
    1f6c:	99 a5       	ldd	r25, Y+41	; 0x29
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_Char+0x3ee>
    1f72:	99 a7       	std	Y+41, r25	; 0x29
    1f74:	88 a7       	std	Y+40, r24	; 0x28
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <LCD_Char+0x416>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f78:	6f a9       	ldd	r22, Y+55	; 0x37
    1f7a:	78 ad       	ldd	r23, Y+56	; 0x38
    1f7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	8e ab       	std	Y+54, r24	; 0x36
    1f8a:	8e a9       	ldd	r24, Y+54	; 0x36
    1f8c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f8e:	8f a1       	ldd	r24, Y+39	; 0x27
    1f90:	8a 95       	dec	r24
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_Char+0x410>
    1f94:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(2000);
	Dio_WritePort(Dio_Port_A,((LCD_Port & 0x0F) | (data << 4)));  /* Sending lower nibble */
    1f96:	eb e3       	ldi	r30, 0x3B	; 59
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	2f 70       	andi	r18, 0x0F	; 15
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e9 5a       	subi	r30, 0xA9	; 169
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	82 95       	swap	r24
    1fae:	92 95       	swap	r25
    1fb0:	90 7f       	andi	r25, 0xF0	; 240
    1fb2:	98 27       	eor	r25, r24
    1fb4:	80 7f       	andi	r24, 0xF0	; 240
    1fb6:	98 27       	eor	r25, r24
    1fb8:	82 2b       	or	r24, r18
    1fba:	98 2f       	mov	r25, r24
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	69 2f       	mov	r22, r25
    1fc0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_WritePort>
	Dio_WriteChannel(EN,STD_high);
    1fc4:	8b e0       	ldi	r24, 0x0B	; 11
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e8       	ldi	r26, 0x80	; 128
    1fd2:	bf e3       	ldi	r27, 0x3F	; 63
    1fd4:	8b a3       	std	Y+35, r24	; 0x23
    1fd6:	9c a3       	std	Y+36, r25	; 0x24
    1fd8:	ad a3       	std	Y+37, r26	; 0x25
    1fda:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fdc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fde:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe4:	2b ea       	ldi	r18, 0xAB	; 171
    1fe6:	3a ea       	ldi	r19, 0xAA	; 170
    1fe8:	4a ea       	ldi	r20, 0xAA	; 170
    1fea:	50 e4       	ldi	r21, 0x40	; 64
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ff6:	98 a3       	std	Y+32, r25	; 0x20
    1ff8:	a9 a3       	std	Y+33, r26	; 0x21
    1ffa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ffc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ffe:	78 a1       	ldd	r23, Y+32	; 0x20
    2000:	89 a1       	ldd	r24, Y+33	; 0x21
    2002:	9a a1       	ldd	r25, Y+34	; 0x22
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	1c f4       	brge	.+6      	; 0x201a <LCD_Char+0x49a>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	8e 8f       	std	Y+30, r24	; 0x1e
    2018:	91 c0       	rjmp	.+290    	; 0x213c <LCD_Char+0x5bc>
	else if (__tmp > 255)
    201a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    201c:	78 a1       	ldd	r23, Y+32	; 0x20
    201e:	89 a1       	ldd	r24, Y+33	; 0x21
    2020:	9a a1       	ldd	r25, Y+34	; 0x22
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4f e7       	ldi	r20, 0x7F	; 127
    2028:	53 e4       	ldi	r21, 0x43	; 67
    202a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    202e:	18 16       	cp	r1, r24
    2030:	0c f0       	brlt	.+2      	; 0x2034 <LCD_Char+0x4b4>
    2032:	7b c0       	rjmp	.+246    	; 0x212a <LCD_Char+0x5aa>
	{
		_delay_ms(__us / 1000.0);
    2034:	6b a1       	ldd	r22, Y+35	; 0x23
    2036:	7c a1       	ldd	r23, Y+36	; 0x24
    2038:	8d a1       	ldd	r24, Y+37	; 0x25
    203a:	9e a1       	ldd	r25, Y+38	; 0x26
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a e7       	ldi	r20, 0x7A	; 122
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8a 8f       	std	Y+26, r24	; 0x1a
    204e:	9b 8f       	std	Y+27, r25	; 0x1b
    2050:	ac 8f       	std	Y+28, r26	; 0x1c
    2052:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2054:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2056:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2058:	8c 8d       	ldd	r24, Y+28	; 0x1c
    205a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a e7       	ldi	r20, 0x7A	; 122
    2062:	55 e4       	ldi	r21, 0x45	; 69
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	8e 8b       	std	Y+22, r24	; 0x16
    206e:	9f 8b       	std	Y+23, r25	; 0x17
    2070:	a8 8f       	std	Y+24, r26	; 0x18
    2072:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2074:	6e 89       	ldd	r22, Y+22	; 0x16
    2076:	7f 89       	ldd	r23, Y+23	; 0x17
    2078:	88 8d       	ldd	r24, Y+24	; 0x18
    207a:	99 8d       	ldd	r25, Y+25	; 0x19
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	2c f4       	brge	.+10     	; 0x2096 <LCD_Char+0x516>
		__ticks = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	9d 8b       	std	Y+21, r25	; 0x15
    2092:	8c 8b       	std	Y+20, r24	; 0x14
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <LCD_Char+0x594>
	else if (__tmp > 65535)
    2096:	6e 89       	ldd	r22, Y+22	; 0x16
    2098:	7f 89       	ldd	r23, Y+23	; 0x17
    209a:	88 8d       	ldd	r24, Y+24	; 0x18
    209c:	99 8d       	ldd	r25, Y+25	; 0x19
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	4f e7       	ldi	r20, 0x7F	; 127
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	4c f5       	brge	.+82     	; 0x2100 <LCD_Char+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20b0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e2       	ldi	r20, 0x20	; 32
    20bc:	51 e4       	ldi	r21, 0x41	; 65
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9d 8b       	std	Y+21, r25	; 0x15
    20d4:	8c 8b       	std	Y+20, r24	; 0x14
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <LCD_Char+0x576>
    20d8:	80 e9       	ldi	r24, 0x90	; 144
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	9b 8b       	std	Y+19, r25	; 0x13
    20de:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20e0:	8a 89       	ldd	r24, Y+18	; 0x12
    20e2:	9b 89       	ldd	r25, Y+19	; 0x13
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <LCD_Char+0x564>
    20e8:	9b 8b       	std	Y+19, r25	; 0x13
    20ea:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	8c 89       	ldd	r24, Y+20	; 0x14
    20ee:	9d 89       	ldd	r25, Y+21	; 0x15
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9d 8b       	std	Y+21, r25	; 0x15
    20f4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f6:	8c 89       	ldd	r24, Y+20	; 0x14
    20f8:	9d 89       	ldd	r25, Y+21	; 0x15
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	69 f7       	brne	.-38     	; 0x20d8 <LCD_Char+0x558>
    20fe:	24 c0       	rjmp	.+72     	; 0x2148 <LCD_Char+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2100:	6e 89       	ldd	r22, Y+22	; 0x16
    2102:	7f 89       	ldd	r23, Y+23	; 0x17
    2104:	88 8d       	ldd	r24, Y+24	; 0x18
    2106:	99 8d       	ldd	r25, Y+25	; 0x19
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9d 8b       	std	Y+21, r25	; 0x15
    2112:	8c 8b       	std	Y+20, r24	; 0x14
    2114:	8c 89       	ldd	r24, Y+20	; 0x14
    2116:	9d 89       	ldd	r25, Y+21	; 0x15
    2118:	99 8b       	std	Y+17, r25	; 0x11
    211a:	88 8b       	std	Y+16, r24	; 0x10
    211c:	88 89       	ldd	r24, Y+16	; 0x10
    211e:	99 89       	ldd	r25, Y+17	; 0x11
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_Char+0x5a0>
    2124:	99 8b       	std	Y+17, r25	; 0x11
    2126:	88 8b       	std	Y+16, r24	; 0x10
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <LCD_Char+0x5c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    212a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    212c:	78 a1       	ldd	r23, Y+32	; 0x20
    212e:	89 a1       	ldd	r24, Y+33	; 0x21
    2130:	9a a1       	ldd	r25, Y+34	; 0x22
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8e 8f       	std	Y+30, r24	; 0x1e
    213c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    213e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2140:	8f 85       	ldd	r24, Y+15	; 0x0f
    2142:	8a 95       	dec	r24
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_Char+0x5c2>
    2146:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(EN,STD_low);
    2148:	8b e0       	ldi	r24, 0x0B	; 11
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 ea       	ldi	r26, 0xA0	; 160
    2156:	b1 e4       	ldi	r27, 0x41	; 65
    2158:	8b 87       	std	Y+11, r24	; 0x0b
    215a:	9c 87       	std	Y+12, r25	; 0x0c
    215c:	ad 87       	std	Y+13, r26	; 0x0d
    215e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	6b 85       	ldd	r22, Y+11	; 0x0b
    2162:	7c 85       	ldd	r23, Y+12	; 0x0c
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a e7       	ldi	r20, 0x7A	; 122
    216e:	55 e4       	ldi	r21, 0x45	; 69
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8f 83       	std	Y+7, r24	; 0x07
    217a:	98 87       	std	Y+8, r25	; 0x08
    217c:	a9 87       	std	Y+9, r26	; 0x09
    217e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <LCD_Char+0x622>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <LCD_Char+0x6a0>
	else if (__tmp > 65535)
    21a2:	6f 81       	ldd	r22, Y+7	; 0x07
    21a4:	78 85       	ldd	r23, Y+8	; 0x08
    21a6:	89 85       	ldd	r24, Y+9	; 0x09
    21a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <LCD_Char+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    21bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21be:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <LCD_Char+0x682>
    21e4:	80 e9       	ldi	r24, 0x90	; 144
    21e6:	91 e0       	ldi	r25, 0x01	; 1
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_Char+0x670>
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9e 83       	std	Y+6, r25	; 0x06
    2200:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <LCD_Char+0x664>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <LCD_Char+0x6b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	9a 81       	ldd	r25, Y+2	; 0x02
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_Char+0x6ac>
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2234:	c9 5a       	subi	r28, 0xA9	; 169
    2236:	df 4f       	sbci	r29, 0xFF	; 255
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <LCD_String>:

/*

*/
void LCD_String(char *str)		/* Send string to LCD function */
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <LCD_String+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <LCD_String+0x8>
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	9c 83       	std	Y+4, r25	; 0x04
    225a:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    225c:	1a 82       	std	Y+2, r1	; 0x02
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    2262:	29 81       	ldd	r18, Y+1	; 0x01
    2264:	3a 81       	ldd	r19, Y+2	; 0x02
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	fc 01       	movw	r30, r24
    226c:	e2 0f       	add	r30, r18
    226e:	f3 1f       	adc	r31, r19
    2270:	80 81       	ld	r24, Z
    2272:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <LCD_Char>

*/
void LCD_String(char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	9a 81       	ldd	r25, Y+2	; 0x02
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	29 81       	ldd	r18, Y+1	; 0x01
    2282:	3a 81       	ldd	r19, Y+2	; 0x02
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	fc 01       	movw	r30, r24
    228a:	e2 0f       	add	r30, r18
    228c:	f3 1f       	adc	r31, r19
    228e:	80 81       	ld	r24, Z
    2290:	88 23       	and	r24, r24
    2292:	39 f7       	brne	.-50     	; 0x2262 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <LCD_String_xy>:
/*

*/
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <LCD_String_xy+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <LCD_String_xy+0x8>
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	6a 83       	std	Y+2, r22	; 0x02
    22b2:	5c 83       	std	Y+4, r21	; 0x04
    22b4:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	88 23       	and	r24, r24
    22ba:	49 f4       	brne	.+18     	; 0x22ce <LCD_String_xy+0x2c>
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	80 31       	cpi	r24, 0x10	; 16
    22c0:	30 f4       	brcc	.+12     	; 0x22ce <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	8f 70       	andi	r24, 0x0F	; 15
    22c6:	80 68       	ori	r24, 0x80	; 128
    22c8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
    22cc:	0b c0       	rjmp	.+22     	; 0x22e4 <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	41 f4       	brne	.+16     	; 0x22e4 <LCD_String_xy+0x42>
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	80 31       	cpi	r24, 0x10	; 16
    22d8:	28 f4       	brcc	.+10     	; 0x22e4 <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	8f 70       	andi	r24, 0x0F	; 15
    22de:	80 6c       	ori	r24, 0xC0	; 192
    22e0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	0e 94 26 11 	call	0x224c	; 0x224c <LCD_String>
}
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <LCD_Clear>:
/*

*/
void LCD_Clear()
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	2e 97       	sbiw	r28, 0x0e	; 14
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e0       	ldi	r26, 0x00	; 0
    231a:	b0 e4       	ldi	r27, 0x40	; 64
    231c:	8b 87       	std	Y+11, r24	; 0x0b
    231e:	9c 87       	std	Y+12, r25	; 0x0c
    2320:	ad 87       	std	Y+13, r26	; 0x0d
    2322:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	6b 85       	ldd	r22, Y+11	; 0x0b
    2326:	7c 85       	ldd	r23, Y+12	; 0x0c
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4a e7       	ldi	r20, 0x7A	; 122
    2332:	55 e4       	ldi	r21, 0x45	; 69
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	8f 83       	std	Y+7, r24	; 0x07
    233e:	98 87       	std	Y+8, r25	; 0x08
    2340:	a9 87       	std	Y+9, r26	; 0x09
    2342:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	2c f4       	brge	.+10     	; 0x2366 <LCD_Clear+0x6c>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9e 83       	std	Y+6, r25	; 0x06
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	3f c0       	rjmp	.+126    	; 0x23e4 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2366:	6f 81       	ldd	r22, Y+7	; 0x07
    2368:	78 85       	ldd	r23, Y+8	; 0x08
    236a:	89 85       	ldd	r24, Y+9	; 0x09
    236c:	9a 85       	ldd	r25, Y+10	; 0x0a
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	4c f5       	brge	.+82     	; 0x23d0 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <LCD_Clear+0xcc>
    23a8:	80 e9       	ldi	r24, 0x90	; 144
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	9c 83       	std	Y+4, r25	; 0x04
    23ae:	8b 83       	std	Y+3, r24	; 0x03
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_Clear+0xba>
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <LCD_Clear+0xae>
    23ce:	14 c0       	rjmp	.+40     	; 0x23f8 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	6f 81       	ldd	r22, Y+7	; 0x07
    23d2:	78 85       	ldd	r23, Y+8	; 0x08
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05
    23e6:	9e 81       	ldd	r25, Y+6	; 0x06
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <LCD_Clear+0xf6>
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    23f8:	80 e8       	ldi	r24, 0x80	; 128
    23fa:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
}
    23fe:	2e 96       	adiw	r28, 0x0e	; 14
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <LCD_Custom_Char>:


void LCD_Custom_Char(unsigned char loc, unsigned char *msg)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	00 d0       	rcall	.+0      	; 0x2416 <LCD_Custom_Char+0x6>
    2416:	00 d0       	rcall	.+0      	; 0x2418 <LCD_Custom_Char+0x8>
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	8a 83       	std	Y+2, r24	; 0x02
    241e:	7c 83       	std	Y+4, r23	; 0x04
    2420:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if(loc<8)
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	88 30       	cpi	r24, 0x08	; 8
    2426:	f8 f4       	brcc	.+62     	; 0x2466 <LCD_Custom_Char+0x56>
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	08 96       	adiw	r24, 0x08	; 8
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <LCD_Command>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    2440:	19 82       	std	Y+1, r1	; 0x01
    2442:	0e c0       	rjmp	.+28     	; 0x2460 <LCD_Custom_Char+0x50>
		LCD_Char(msg[i]);
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	fc 01       	movw	r30, r24
    2450:	e2 0f       	add	r30, r18
    2452:	f3 1f       	adc	r31, r19
    2454:	80 81       	ld	r24, Z
    2456:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <LCD_Char>
{
	unsigned char i;
	if(loc<8)
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	89 83       	std	Y+1, r24	; 0x01
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	88 30       	cpi	r24, 0x08	; 8
    2464:	78 f3       	brcs	.-34     	; 0x2444 <LCD_Custom_Char+0x34>
		LCD_Char(msg[i]);
	}
}
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <main>:
#include "lcd.h"

#define LED0	Dio_Channel_C2
uint8 key=0;
uint8 address=0x80;
int main(){
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	e8 97       	sbiw	r28, 0x38	; 56
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
	Dio_init();
    2488:	0e 94 fc 07 	call	0xff8	; 0xff8 <Dio_init>
	//Dio_WritePort(Dio_Port_B,0xF0);
	Dio_WritePort(Dio_Port_C,0x78);
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	68 e7       	ldi	r22, 0x78	; 120
    2490:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_WritePort>
	LCD_Init();
    2494:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_Init>
	LCD_Clear();
    2498:	0e 94 7d 11 	call	0x22fa	; 0x22fa <LCD_Clear>
	while(1){
	key=GetKeypressed();
    249c:	0e 94 56 09 	call	0x12ac	; 0x12ac <GetKeypressed>
    24a0:	80 93 ca 00 	sts	0x00CA, r24
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	a0 e2       	ldi	r26, 0x20	; 32
    24aa:	b1 e4       	ldi	r27, 0x41	; 65
    24ac:	8d ab       	std	Y+53, r24	; 0x35
    24ae:	9e ab       	std	Y+54, r25	; 0x36
    24b0:	af ab       	std	Y+55, r26	; 0x37
    24b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b4:	6d a9       	ldd	r22, Y+53	; 0x35
    24b6:	7e a9       	ldd	r23, Y+54	; 0x36
    24b8:	8f a9       	ldd	r24, Y+55	; 0x37
    24ba:	98 ad       	ldd	r25, Y+56	; 0x38
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a e7       	ldi	r20, 0x7A	; 122
    24c2:	55 e4       	ldi	r21, 0x45	; 69
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	89 ab       	std	Y+49, r24	; 0x31
    24ce:	9a ab       	std	Y+50, r25	; 0x32
    24d0:	ab ab       	std	Y+51, r26	; 0x33
    24d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24d4:	69 a9       	ldd	r22, Y+49	; 0x31
    24d6:	7a a9       	ldd	r23, Y+50	; 0x32
    24d8:	8b a9       	ldd	r24, Y+51	; 0x33
    24da:	9c a9       	ldd	r25, Y+52	; 0x34
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <main+0x82>
		__ticks = 1;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	98 ab       	std	Y+48, r25	; 0x30
    24f2:	8f a7       	std	Y+47, r24	; 0x2f
    24f4:	3f c0       	rjmp	.+126    	; 0x2574 <main+0x100>
	else if (__tmp > 65535)
    24f6:	69 a9       	ldd	r22, Y+49	; 0x31
    24f8:	7a a9       	ldd	r23, Y+50	; 0x32
    24fa:	8b a9       	ldd	r24, Y+51	; 0x33
    24fc:	9c a9       	ldd	r25, Y+52	; 0x34
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	4c f5       	brge	.+82     	; 0x2560 <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	6d a9       	ldd	r22, Y+53	; 0x35
    2510:	7e a9       	ldd	r23, Y+54	; 0x36
    2512:	8f a9       	ldd	r24, Y+55	; 0x37
    2514:	98 ad       	ldd	r25, Y+56	; 0x38
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	98 ab       	std	Y+48, r25	; 0x30
    2534:	8f a7       	std	Y+47, r24	; 0x2f
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <main+0xe2>
    2538:	80 e9       	ldi	r24, 0x90	; 144
    253a:	91 e0       	ldi	r25, 0x01	; 1
    253c:	9e a7       	std	Y+46, r25	; 0x2e
    253e:	8d a7       	std	Y+45, r24	; 0x2d
    2540:	8d a5       	ldd	r24, Y+45	; 0x2d
    2542:	9e a5       	ldd	r25, Y+46	; 0x2e
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <main+0xd0>
    2548:	9e a7       	std	Y+46, r25	; 0x2e
    254a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	8f a5       	ldd	r24, Y+47	; 0x2f
    254e:	98 a9       	ldd	r25, Y+48	; 0x30
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	98 ab       	std	Y+48, r25	; 0x30
    2554:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	8f a5       	ldd	r24, Y+47	; 0x2f
    2558:	98 a9       	ldd	r25, Y+48	; 0x30
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	69 f7       	brne	.-38     	; 0x2538 <main+0xc4>
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2560:	69 a9       	ldd	r22, Y+49	; 0x31
    2562:	7a a9       	ldd	r23, Y+50	; 0x32
    2564:	8b a9       	ldd	r24, Y+51	; 0x33
    2566:	9c a9       	ldd	r25, Y+52	; 0x34
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	98 ab       	std	Y+48, r25	; 0x30
    2572:	8f a7       	std	Y+47, r24	; 0x2f
    2574:	8f a5       	ldd	r24, Y+47	; 0x2f
    2576:	98 a9       	ldd	r25, Y+48	; 0x30
    2578:	9c a7       	std	Y+44, r25	; 0x2c
    257a:	8b a7       	std	Y+43, r24	; 0x2b
    257c:	8b a5       	ldd	r24, Y+43	; 0x2b
    257e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	f1 f7       	brne	.-4      	; 0x2580 <main+0x10c>
    2584:	9c a7       	std	Y+44, r25	; 0x2c
    2586:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
//	LCD_Command(0x80);


	if( (key!=KEY_RELEASE)){
    2588:	80 91 ca 00 	lds	r24, 0x00CA
    258c:	8f 3f       	cpi	r24, 0xFF	; 255
    258e:	09 f4       	brne	.+2      	; 0x2592 <main+0x11e>
    2590:	f0 c0       	rjmp	.+480    	; 0x2772 <main+0x2fe>

		LCD_Char(key);
    2592:	80 91 ca 00 	lds	r24, 0x00CA
    2596:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <LCD_Char>
		 key=KEY_RELEASE;
    259a:	8f ef       	ldi	r24, 0xFF	; 255
    259c:	80 93 ca 00 	sts	0x00CA, r24
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a8 ec       	ldi	r26, 0xC8	; 200
    25a6:	b2 e4       	ldi	r27, 0x42	; 66
    25a8:	8f a3       	std	Y+39, r24	; 0x27
    25aa:	98 a7       	std	Y+40, r25	; 0x28
    25ac:	a9 a7       	std	Y+41, r26	; 0x29
    25ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b0:	6f a1       	ldd	r22, Y+39	; 0x27
    25b2:	78 a5       	ldd	r23, Y+40	; 0x28
    25b4:	89 a5       	ldd	r24, Y+41	; 0x29
    25b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a e7       	ldi	r20, 0x7A	; 122
    25be:	55 e4       	ldi	r21, 0x45	; 69
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8b a3       	std	Y+35, r24	; 0x23
    25ca:	9c a3       	std	Y+36, r25	; 0x24
    25cc:	ad a3       	std	Y+37, r26	; 0x25
    25ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25d0:	6b a1       	ldd	r22, Y+35	; 0x23
    25d2:	7c a1       	ldd	r23, Y+36	; 0x24
    25d4:	8d a1       	ldd	r24, Y+37	; 0x25
    25d6:	9e a1       	ldd	r25, Y+38	; 0x26
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5f e3       	ldi	r21, 0x3F	; 63
    25e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e4:	88 23       	and	r24, r24
    25e6:	2c f4       	brge	.+10     	; 0x25f2 <main+0x17e>
		__ticks = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9a a3       	std	Y+34, r25	; 0x22
    25ee:	89 a3       	std	Y+33, r24	; 0x21
    25f0:	3f c0       	rjmp	.+126    	; 0x2670 <main+0x1fc>
	else if (__tmp > 65535)
    25f2:	6b a1       	ldd	r22, Y+35	; 0x23
    25f4:	7c a1       	ldd	r23, Y+36	; 0x24
    25f6:	8d a1       	ldd	r24, Y+37	; 0x25
    25f8:	9e a1       	ldd	r25, Y+38	; 0x26
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	4c f5       	brge	.+82     	; 0x265c <main+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	6f a1       	ldd	r22, Y+39	; 0x27
    260c:	78 a5       	ldd	r23, Y+40	; 0x28
    260e:	89 a5       	ldd	r24, Y+41	; 0x29
    2610:	9a a5       	ldd	r25, Y+42	; 0x2a
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9a a3       	std	Y+34, r25	; 0x22
    2630:	89 a3       	std	Y+33, r24	; 0x21
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <main+0x1de>
    2634:	80 e9       	ldi	r24, 0x90	; 144
    2636:	91 e0       	ldi	r25, 0x01	; 1
    2638:	98 a3       	std	Y+32, r25	; 0x20
    263a:	8f 8f       	std	Y+31, r24	; 0x1f
    263c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263e:	98 a1       	ldd	r25, Y+32	; 0x20
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <main+0x1cc>
    2644:	98 a3       	std	Y+32, r25	; 0x20
    2646:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2648:	89 a1       	ldd	r24, Y+33	; 0x21
    264a:	9a a1       	ldd	r25, Y+34	; 0x22
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	9a a3       	std	Y+34, r25	; 0x22
    2650:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	89 a1       	ldd	r24, Y+33	; 0x21
    2654:	9a a1       	ldd	r25, Y+34	; 0x22
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	69 f7       	brne	.-38     	; 0x2634 <main+0x1c0>
    265a:	14 c0       	rjmp	.+40     	; 0x2684 <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265c:	6b a1       	ldd	r22, Y+35	; 0x23
    265e:	7c a1       	ldd	r23, Y+36	; 0x24
    2660:	8d a1       	ldd	r24, Y+37	; 0x25
    2662:	9e a1       	ldd	r25, Y+38	; 0x26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9a a3       	std	Y+34, r25	; 0x22
    266e:	89 a3       	std	Y+33, r24	; 0x21
    2670:	89 a1       	ldd	r24, Y+33	; 0x21
    2672:	9a a1       	ldd	r25, Y+34	; 0x22
    2674:	9e 8f       	std	Y+30, r25	; 0x1e
    2676:	8d 8f       	std	Y+29, r24	; 0x1d
    2678:	8d 8d       	ldd	r24, Y+29	; 0x1d
    267a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <main+0x208>
    2680:	9e 8f       	std	Y+30, r25	; 0x1e
    2682:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		 Dio_WriteChannel(LED0,STD_high);
    2684:	82 e1       	ldi	r24, 0x12	; 18
    2686:	61 e0       	ldi	r22, 0x01	; 1
    2688:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	aa e7       	ldi	r26, 0x7A	; 122
    2692:	b4 e4       	ldi	r27, 0x44	; 68
    2694:	89 8f       	std	Y+25, r24	; 0x19
    2696:	9a 8f       	std	Y+26, r25	; 0x1a
    2698:	ab 8f       	std	Y+27, r26	; 0x1b
    269a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	69 8d       	ldd	r22, Y+25	; 0x19
    269e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8d 8b       	std	Y+21, r24	; 0x15
    26b6:	9e 8b       	std	Y+22, r25	; 0x16
    26b8:	af 8b       	std	Y+23, r26	; 0x17
    26ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <main+0x26a>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <main+0x2e8>
	else if (__tmp > 65535)
    26de:	6d 89       	ldd	r22, Y+21	; 0x15
    26e0:	7e 89       	ldd	r23, Y+22	; 0x16
    26e2:	8f 89       	ldd	r24, Y+23	; 0x17
    26e4:	98 8d       	ldd	r25, Y+24	; 0x18
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <main+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	69 8d       	ldd	r22, Y+25	; 0x19
    26f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9c 8b       	std	Y+20, r25	; 0x14
    271c:	8b 8b       	std	Y+19, r24	; 0x13
    271e:	0f c0       	rjmp	.+30     	; 0x273e <main+0x2ca>
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	9a 8b       	std	Y+18, r25	; 0x12
    2726:	89 8b       	std	Y+17, r24	; 0x11
    2728:	89 89       	ldd	r24, Y+17	; 0x11
    272a:	9a 89       	ldd	r25, Y+18	; 0x12
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <main+0x2b8>
    2730:	9a 8b       	std	Y+18, r25	; 0x12
    2732:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8b 89       	ldd	r24, Y+19	; 0x13
    2736:	9c 89       	ldd	r25, Y+20	; 0x14
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <main+0x2ac>
    2746:	aa ce       	rjmp	.-684    	; 0x249c <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6d 89       	ldd	r22, Y+21	; 0x15
    274a:	7e 89       	ldd	r23, Y+22	; 0x16
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9c 8b       	std	Y+20, r25	; 0x14
    275a:	8b 8b       	std	Y+19, r24	; 0x13
    275c:	8b 89       	ldd	r24, Y+19	; 0x13
    275e:	9c 89       	ldd	r25, Y+20	; 0x14
    2760:	98 8b       	std	Y+16, r25	; 0x10
    2762:	8f 87       	std	Y+15, r24	; 0x0f
    2764:	8f 85       	ldd	r24, Y+15	; 0x0f
    2766:	98 89       	ldd	r25, Y+16	; 0x10
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <main+0x2f4>
    276c:	98 8b       	std	Y+16, r25	; 0x10
    276e:	8f 87       	std	Y+15, r24	; 0x0f
    2770:	95 ce       	rjmp	.-726    	; 0x249c <main+0x28>
		 _delay_ms(1000);


	}//if
	else if(address>0x8F){
    2772:	80 91 69 00 	lds	r24, 0x0069
    2776:	80 39       	cpi	r24, 0x90	; 144
    2778:	08 f4       	brcc	.+2      	; 0x277c <main+0x308>
    277a:	90 ce       	rjmp	.-736    	; 0x249c <main+0x28>
		address=0x80;
    277c:	80 e8       	ldi	r24, 0x80	; 128
    277e:	80 93 69 00 	sts	0x0069, r24
		 	Dio_WriteChannel(LED0,STD_low);
    2782:	82 e1       	ldi	r24, 0x12	; 18
    2784:	60 e0       	ldi	r22, 0x00	; 0
    2786:	0e 94 90 06 	call	0xd20	; 0xd20 <Dio_WriteChannel>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a8 ec       	ldi	r26, 0xC8	; 200
    2790:	b2 e4       	ldi	r27, 0x42	; 66
    2792:	8b 87       	std	Y+11, r24	; 0x0b
    2794:	9c 87       	std	Y+12, r25	; 0x0c
    2796:	ad 87       	std	Y+13, r26	; 0x0d
    2798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279a:	6b 85       	ldd	r22, Y+11	; 0x0b
    279c:	7c 85       	ldd	r23, Y+12	; 0x0c
    279e:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a e7       	ldi	r20, 0x7A	; 122
    27a8:	55 e4       	ldi	r21, 0x45	; 69
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	8f 83       	std	Y+7, r24	; 0x07
    27b4:	98 87       	std	Y+8, r25	; 0x08
    27b6:	a9 87       	std	Y+9, r26	; 0x09
    27b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <main+0x368>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	3f c0       	rjmp	.+126    	; 0x285a <main+0x3e6>
	else if (__tmp > 65535)
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <main+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
    281c:	0f c0       	rjmp	.+30     	; 0x283c <main+0x3c8>
    281e:	80 e9       	ldi	r24, 0x90	; 144
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	9c 83       	std	Y+4, r25	; 0x04
    2824:	8b 83       	std	Y+3, r24	; 0x03
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <main+0x3b6>
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	69 f7       	brne	.-38     	; 0x281e <main+0x3aa>
    2844:	2b ce       	rjmp	.-938    	; 0x249c <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <main+0x3f2>
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	16 ce       	rjmp	.-980    	; 0x249c <main+0x28>

00002870 <__prologue_saves__>:
    2870:	2f 92       	push	r2
    2872:	3f 92       	push	r3
    2874:	4f 92       	push	r4
    2876:	5f 92       	push	r5
    2878:	6f 92       	push	r6
    287a:	7f 92       	push	r7
    287c:	8f 92       	push	r8
    287e:	9f 92       	push	r9
    2880:	af 92       	push	r10
    2882:	bf 92       	push	r11
    2884:	cf 92       	push	r12
    2886:	df 92       	push	r13
    2888:	ef 92       	push	r14
    288a:	ff 92       	push	r15
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	ca 1b       	sub	r28, r26
    289a:	db 0b       	sbc	r29, r27
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	09 94       	ijmp

000028a8 <__epilogue_restores__>:
    28a8:	2a 88       	ldd	r2, Y+18	; 0x12
    28aa:	39 88       	ldd	r3, Y+17	; 0x11
    28ac:	48 88       	ldd	r4, Y+16	; 0x10
    28ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    28b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ba:	b9 84       	ldd	r11, Y+9	; 0x09
    28bc:	c8 84       	ldd	r12, Y+8	; 0x08
    28be:	df 80       	ldd	r13, Y+7	; 0x07
    28c0:	ee 80       	ldd	r14, Y+6	; 0x06
    28c2:	fd 80       	ldd	r15, Y+5	; 0x05
    28c4:	0c 81       	ldd	r16, Y+4	; 0x04
    28c6:	1b 81       	ldd	r17, Y+3	; 0x03
    28c8:	aa 81       	ldd	r26, Y+2	; 0x02
    28ca:	b9 81       	ldd	r27, Y+1	; 0x01
    28cc:	ce 0f       	add	r28, r30
    28ce:	d1 1d       	adc	r29, r1
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	ed 01       	movw	r28, r26
    28dc:	08 95       	ret

000028de <_exit>:
    28de:	f8 94       	cli

000028e0 <__stop_program>:
    28e0:	ff cf       	rjmp	.-2      	; 0x28e0 <__stop_program>
